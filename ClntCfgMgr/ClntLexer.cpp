
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[811] =
    {   0,
        1,    1,    0,    0,    0,    0,   95,   93,    2,    1,
        1,   93,   75,   93,   93,   92,   92,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   79,   79,   94,    1,    1,
        1,    0,   87,   75,    0,   87,   77,   76,   92,    0,
        0,   91,    0,   84,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,    9,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   50,   88,
       88,   88,   88,   88,   88,   88,   88,   23,   24,   10,
       88,   88,   88,   88,   88,   78,   76,   92,    0,    0,

        0,   83,   89,   82,   82,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   92,    0,    0,    0,    0,
       81,   81,    0,   82,    0,   82,   88,   88,   71,   88,
       88,   88,   88,   88,   88,   88,   88,   32,   11,   88,
       88,   88,   88,   88,    8,    0,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   92,    0,   90,

        0,    0,    0,   81,    0,   81,    0,   82,   82,   82,
       82,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,    3,   88,   88,   88,   88,   88,   88,
       88,    0,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,    0,    0,    0,
        0,    0,   81,   81,   81,   81,    0,   82,   82,   82,
        0,   82,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   27,   88,   88,   88,   88,   33,   88,   88,   88,
       88,   88,   88,   88,    0,    0,   88,   88,   88,   88,

       25,   88,   51,   88,   88,   88,   88,   88,   88,   18,
       88,   88,   88,   88,   88,    6,   88,   88,   88,   88,
       88,    0,    0,    0,    0,   81,   81,   81,    0,   81,
        0,    0,   82,   82,   82,   82,   88,    5,   88,   88,
       88,   88,   88,   88,   88,   55,   53,   88,   88,   88,
       88,   88,   88,   88,   88,   88,    0,    0,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   74,
       41,   88,   88,   88,   88,   88,   88,   47,   88,   88,
       88,   90,    0,    0,    0,    0,    0,   81,   81,   81,
       81,    0,   82,   82,   82,    0,   82,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   54,   88,
       88,   88,   88,   40,   88,   88,   14,   15,    0,    0,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   17,
        0,    0,    0,    0,   81,   81,   81,    0,   81,   86,
       82,   82,   82,   82,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   52,   88,   88,   88,   88,
       13,    0,    0,   88,   88,    4,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   12,   88,   29,
       88,   88,    0,    0,    0,    0,   85,   81,   81,   81,

       81,   82,   82,   82,    0,   82,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   26,   88,   88,   88,
       16,    0,    0,   37,   36,   28,   88,   88,   88,   88,
       88,   88,   88,   88,   31,   30,   88,   88,   88,   88,
       90,    0,    0,   81,   81,   81,    0,   81,   82,   82,
       82,   82,   73,   88,   88,   88,   88,   88,   88,   88,
       62,   88,   88,   88,   58,   39,   38,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   56,
        0,    0,    0,    0,   81,   81,   81,   81,   82,   82,
       82,    0,   82,    7,   88,   88,   60,   88,   35,   88,

       63,   72,   88,   88,   88,   88,   88,   88,   45,   88,
       88,   88,   70,   88,   88,    0,    0,    0,   81,   81,
       81,    0,   81,   82,   82,   82,   82,   88,   88,   34,
       88,   88,   59,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   90,    0,    0,    0,   81,   81,   81,
       81,   82,   82,   82,    0,   82,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   42,   88,   88,   21,
        0,    0,   80,   83,   81,   81,   81,    0,   81,   82,
       82,   82,   82,   88,   88,   64,   88,   88,   88,   88,
       88,   88,   88,   22,   88,    0,    0,   80,    0,   81,

       81,   81,   81,   81,   82,   82,   82,    0,   82,   88,
       88,   65,   88,   88,   88,   88,   44,   88,   88,   88,
       88,   88,   90,   80,   83,   81,    0,   81,   81,   81,
       81,   82,   82,   82,   88,   88,   88,   88,   88,   88,
       19,   88,   43,   49,   88,   88,    0,   80,   81,   81,
       81,   81,   82,   82,   82,   88,   88,   66,   67,   68,
       69,   20,   46,   88,    0,   81,   81,    0,   81,   81,
       82,   88,   61,   88,   90,   81,   81,   82,   88,   88,
        0,   81,   81,    0,   57,   48,   80,   81,   81,   80,
       81,   81,    0,    0,   81,   81,    0,   81,   81,    0,

       90,   81,   81,    0,   81,   81,    0,   81,   81,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[896] =
    {   0,
        0,    0, 1565, 1564,    0,    0, 1571, 3907, 3907,   72,
       74, 1565,    0, 1561,   71,   71,   34, 1512,  134,  183,
      227,  187,  239,  296,   77,   71,  194,   43,  188,  197,
      300,  313,   67,   87,   67, 3907, 1521, 3907,  108,  112,
      115, 1526, 3907,    0, 1523, 1522, 3907,    0,  358, 1506,
      376, 3907,    0,  402,    0,  444,   83,  170,    0,  179,
      176,  185,  193,  220,  231,  237,  231,  245,  241,  250,
      320,  246,  247,  242,  239, 1517,  291,  288,    0,  307,
      299,  448,  295,  300,  303,  367,  452,    0,    0,    0,
      370,  375,  379,  414,  437, 3907,    0,  506, 1504,  427,

     1494,  550,    0,  594,  524,  636,  438,  439,  445,  452,
      443,  458, 1488,  463,  462,  462,  454,  465,  521,  528,
      523,  534, 1476,  570,  123,  573, 1470,  575,  611,  609,
      604,  615,  632,  627,  629,  641, 1469,  635,  632,  644,
      649,  652,  647,  653,  647,  694,  575, 1456, 1455, 1447,
      740,  712,  721,  784,  826,  758,  868,  760,    0,  741,
     1458, 1362,  755,  788,  799, 1361,  791, 1360,    0,  805,
      806,  823,  829,  873,    0, 1359,  873,  863,  860,  865,
      879,  877,  868,  880,  869,  885,  882,  877,  916, 1358,
      896,  918, 1348,  921,  919,  909, 1310,  945, 1297, 1296,

     1295, 1294,  971,  982, 1024, 1000, 1042, 1068, 1086, 1112,
     1130, 1293,  909,  907,  915,  928,  914,  911, 1001, 1010,
     1125, 1067, 1075,    0, 1122, 1112, 1124, 1119, 1130, 1121,
     1137, 1146, 1131, 1142, 1134, 1144, 1137, 1134, 1129, 1303,
     1148, 1135, 1161, 1148, 1154, 1149, 1155, 1177, 1180, 1172,
     1165, 1179, 1161, 1169, 1302, 1171, 1186, 1218, 1198, 1093,
     1092, 1208, 1228, 1246, 1272, 1290, 1255, 1316, 1091, 1328,
     1370, 1346, 1235, 1261, 1277, 1348, 1338, 1335, 1345, 1102,
     1352,    0, 1367, 1370, 1358, 1371,    0, 1363, 1101, 1373,
     1375, 1366, 1385, 1377, 1376, 1387, 1380, 1376, 1389, 1385,

        0, 1417, 1100, 1401, 1396, 1099, 1098, 1386, 1416,    0,
     1411, 1407, 1411, 1422, 1070,    0, 1413, 1413, 1422, 1061,
     1427, 1048, 1047, 1046, 1446, 1474, 1045, 1486, 1528, 1504,
     1546, 1572, 1583, 1601, 1627, 1645, 1492, 1056, 1507, 1544,
     1590, 1594, 1632, 1652, 1624,    0, 1627, 1632, 1644, 1645,
     1638, 1647, 1638, 1656, 1657, 1658, 1651, 1647, 1666, 1647,
     1661, 1658, 1677, 1677, 1679, 1669, 1678, 1678, 1697,    0,
        0, 1698, 1678, 1687, 1683, 1685, 1690,    0, 1696, 1693,
     1695, 1043, 1042, 1008, 1007, 1751, 1762, 1773, 1791, 1817,
     1835, 1723, 1861, 1005, 1873, 1915, 1891, 1736, 1769, 1780,

     1832, 1894, 1877, 1893, 1886, 1900, 1914, 1922,    0, 1923,
     1915, 1016, 1915,    0, 1913, 1920,    0,    0, 1932, 1912,
     1926, 1931, 1930, 1933, 1015, 1935, 1935, 1935, 1928, 1945,
     1930, 1958, 1963, 1963, 1951, 1965, 1967, 1967, 1962,    0,
     1002, 1001, 1000, 1988, 2014,  990, 2026, 2068, 2044, 2053,
     2112, 2086, 2156, 2130, 1977, 2059,  984, 2060, 2108, 2122,
     2123, 2164, 2152, 2166, 2150,    0, 2149, 2157, 2167, 2153,
        0, 2164, 2169, 2161, 2158,    0, 2159, 2170,  965, 2166,
     2166, 2162, 2163, 2170, 2195, 2192, 2202,    0, 2209,    0,
     2208, 2209,  894,  851,  850,  848, 2226, 2252, 2270, 2296,

     2314, 2340,  847, 2352, 2394, 2370, 2215, 2259, 2307, 2355,
     2371, 2374, 2357, 2391, 2400, 2397,    0, 2406, 2393, 2404,
        0, 2396, 2393,    0,    0,    0, 2403, 2408, 2428, 2410,
     2407, 2412, 2396, 2404,    0,    0, 2409,  858, 2408, 2426,
      845,  844,  843, 2483,  841, 2495, 2537, 2513, 2581, 2555,
     2625, 2599,    0, 2410, 2445,  852, 2515, 2522, 2569,  851,
        0, 2592, 2595, 2630,    0, 3907, 3907, 2629, 2618, 2628,
     2633, 2632, 2620,  850, 2636, 2639, 2630, 2630, 2636,    0,
      837,  806,  805,  804, 2683, 2701, 2727, 2745, 2771,  803,
     2783, 2825, 2801,    0, 2641, 2678,    0, 2697,    0, 2819,

        0,    0, 2742, 2802, 2786, 2803, 2807, 2835,    0, 2836,
     2821, 2825,    0, 2826, 2829,  802,  801,  799, 2880,  798,
     2892, 2934, 2910, 2978, 2952, 3022, 2996,  809, 2839,    0,
     2912, 2926,    0, 2966, 2998, 2999, 3009, 3012, 3030, 3015,
     3021,  808, 3031,  795,  794,  793,  764, 3074, 3048, 3118,
     3092, 3136,  763, 3162, 3204, 3180, 3020, 3036,  766, 3099,
     3135, 3167, 3166, 3182, 3179, 3201,    0, 3209, 3198,    0,
      761,  760,  759,    0, 3228,  758, 3254, 3296, 3272, 3340,
     3314, 3384, 3358, 3213, 3270,    0,  385, 3283, 3329, 3356,
     3348, 3378, 3389,    0, 3380,  730,  727,  672,  671,  670,

     3433, 3407, 3477, 3451, 3495,  669, 3521,    0, 3539, 3380,
     3426,    0,  123,  663,  669, 3446,    0, 3446, 3484, 3525,
     3524, 3520,  660,  659, 3907,  616,    0, 3579,  615, 3591,
     3565, 3635, 3609,    0, 3522, 3551,  619,  616,  617,  618,
        0, 3586,    0,    0, 3579, 3596,  609,  608,  607,  606,
     3679, 3654, 3697,  605,    0, 3656, 3660,    0,    0,    0,
        0,    0,    0, 3689,  604,  603,  564,    0, 3723, 3907,
        0, 3680,    0, 3686,  563,  562,  561, 3907, 3681, 3695,
      560,  559,  530,    0,    0,    0,  529,  528,  527,  526,
      525,  480,    0,  427,  416,  415,    0,  414,  413,    0,

      412,  411,  382,  380,  332,  331,    0,  313,  285, 3907,
     3750, 3754, 3758, 3762, 3766, 3770, 3772,  302, 3774, 3776,
     3778, 3780, 3782, 3784, 3786, 3788, 3790, 3792, 3794, 3796,
     3798, 3800, 3802, 3804, 3806, 3808, 3810, 3812, 3814, 3816,
     3818, 3820, 3822, 3824, 3826, 3828, 3830, 3832, 3834, 3836,
     3838, 3840, 3842, 3844,  285, 3846, 3848, 3850,  283, 3852,
     3854, 3856,  282,  280, 3858, 3860, 3862,  229, 3864, 3866,
      226,  224, 3868, 3870, 3872, 3874, 3876,  207, 3878, 3880,
     3882, 3884, 3886,  143, 3888, 3890, 3892,  139, 3894,  134,
     3896, 3898, 3900,   79, 3902

    } ;

static yyconst flex_int16_t yy_def[896] =
    {   0,
      810,    1,  811,  811,  812,  812,  810,  810,  810,  810,
      810,  813,  814,  815,  810,  810,   16,  810,  810,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,  810,  810,  810,  810,
      810,  813,  810,  814,  815,  810,  810,  816,  810,  817,
       49,  810,  818,  810,   24,   24,   56,   56,   24,   24,
       24,   56,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,  816,  810,  819,   98,

      820,  810,  818,  810,  104,   56,  106,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,  146,  821,  822,  823,
      810,  151,  810,  810,  810,  154,  106,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  147,  147,  822,

      824,  825,  810,  810,  810,  204,  810,  810,  208,  810,
      210,  157,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  810,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  826,  810,  827,
      828,  810,  810,  263,  810,  265,  810,  810,  810,  810,
      810,  270,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  810,  810,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  829,  830,  831,  810,  810,  810,  810,  810,  328,
      810,  810,  810,  333,  810,  335,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  810,  810,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  827,  810,  832,  833,  810,  810,  810,  388,  810,
      390,  810,  810,  810,  810,  810,  395,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  810,  810,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      834,  835,  836,  810,  810,  810,  810,  810,  447,  810,
      810,  451,  810,  453,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  810,  810,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  837,  810,  838,  839,  810,  810,  498,  810,

      500,  810,  810,  810,  810,  504,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  810,  810,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      840,  841,  842,  810,  810,  810,  810,  546,  810,  549,
      810,  551,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  810,  810,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      843,  810,  844,  845,  810,  585,  810,  587,  810,  810,
      810,  810,  591,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  846,  847,  848,  810,  810,
      810,  810,  621,  810,  624,  810,  626,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  849,  810,  850,  851,  810,  648,  810,
      650,  810,  810,  810,  810,  654,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      852,  853,  854,  855,  810,  810,  810,  810,  677,  810,
      680,  810,  682,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  856,  810,  857,  810,  858,

      810,  701,  810,  703,  810,  810,  810,  859,  707,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  860,  861,  810,  862,  863,  810,  810,  810,
      730,  810,  732,  864,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  865,  810,  866,  867,
      810,  751,  810,  810,  868,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  869,  810,  870,  871,  810,  810,
      872,   24,   24,   24,  873,  874,  875,  810,   24,   24,
      876,  810,  877,  878,   24,   24,  879,  880,  881,  882,
      810,  883,  884,  885,  886,  887,  888,  810,  889,  890,

      810,  891,  892,  885,  810,  893,  894,  895,  810,    0,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810

    } ;

static yyconst flex_int16_t yy_nxt[3982] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   24,   27,   28,   29,   24,   30,
       31,   32,   33,   34,   35,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       24,   27,   28,   29,   24,   30,   31,   32,   33,   34,
       35,   24,   24,   24,   39,   40,   41,   40,   47,  810,
       78,  704,   48,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   50,   51,   51,   51,   51,   51,   51,   69,

       52,   72,   92,   95,   70,  810,   78,   73,  107,   93,
       39,   40,   71,   94,   41,   40,   53,   39,   40,   51,
       51,   51,   51,   51,   51,   69,   52,   72,   92,   95,
       70,  176,  177,   73,  107,   93,  803,  737,   71,   94,
      738,  801,   53,   55,   55,  796,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   50,   56,   56,   56,   57,
       56,   58,   55,   59,   55,   55,   55,   55,   55,   60,
       55,   55,   55,   55,   55,   55,   61,   55,   55,   55,
       55,   55,   56,   56,   56,   57,   56,   58,   55,   59,
       55,   55,   55,   55,   55,   60,   55,   55,   55,   55,

       55,   55,   61,   55,   55,   55,   55,   55,   56,  789,
       56,  108,   56,   79,   56,  109,   74,  110,   55,   81,
      111,  112,   55,   82,   75,   55,  778,   80,  777,   55,
       76,  771,   67,   83,   56,   77,   56,  108,   56,   79,
       56,  109,   74,  110,   55,   81,  111,  112,   55,   82,
       75,   55,   62,   80,   56,   55,   76,   63,   67,   83,
      113,   77,   64,   65,   56,  114,   56,  115,  116,   66,
      117,  118,  119,  122,   55,  123,  124,   68,   62,  125,
       56,   55,  755,   63,  750,  734,  113,  700,   64,   65,
       56,  114,   56,  115,  116,   66,  117,  118,  119,  122,

       55,  123,  124,   68,  103,  125,  807,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,  810,   55,   55,
       55,   55,   55,   55,   84,   55,   88,   89,  127,  128,
       85,   55,   86,  129,  807,   90,  130,  135,   55,  136,
      137,   87,  120,   91,   55,   55,   55,   55,   55,   55,
       84,   55,  807,  800,  127,  128,   85,   55,   86,  129,
      121,   90,  130,  135,   55,  136,  137,   87,  120,   91,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   99,
      100,  100,  100,  100,  100,  100,  121,   52,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  138,  712,  713,

      714,  810,  715,  807,  141,  142,  100,  100,  100,  100,
      100,  100,  143,   52,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  138,  105,  105,  105,  105,  105,  105,
      141,  142,  800,  804,  800,  793,  800,  793,  143,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  725,  144,
      105,  105,  105,  105,  105,  105,  106,  106,  106,  106,
      106,  106,  106,  106,  106,   99,  106,  106,  106,  106,
      106,  106,  131,   59,  139,  144,  145,  158,  159,  132,
      160,  161,  133,  162,  163,  165,  134,  166,  167,  168,
      169,  140,  106,  106,  106,  106,  106,  106,  131,   59,

      139,  793,  145,  158,  159,  132,  160,  161,  133,  162,
      163,  165,  134,  166,  167,  168,  169,  140,  146,  146,
      146,  146,  146,  146,  146,  146,  146,   50,  147,  147,
      147,  147,  147,  147,  810,   52,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  170,  784,  794,  793,  784,
      699,  784,  171,  172,  147,  147,  147,  147,  147,  147,
      173,   52,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  170,  152,  152,  152,  152,  152,  152,  171,  172,
      768,  674,  784,  768,  781,  768,  173,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  175,  178,  152,  152,

      152,  152,  152,  152,  153,  180,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  155,  156,  156,  156,  156,
      156,  156,  175,  178,  727,  647,  708,  768,  727,  699,
      102,  180,  761,  760,  759,  758,  678,  727,  181,  182,
      183,  184,  156,  156,  156,  156,  156,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  157,   50,  157,  157,
      157,  157,  157,  157,  181,  182,  183,  184,  185,  186,
      187,  188,  190,  191,  192,  193,  194,  195,  196,  197,
      699,  747,  740,  739,  157,  157,  157,  157,  157,  157,
      655,  727,  725,  699,  185,  186,  187,  188,  190,  191,

      192,  193,  194,  195,  196,  197,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   50,  199,  199,  199,  199,
      199,  199,  810,   52,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  199,  199,  199,  199,  199,  199,  647,   52,
      203,  584,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  205,  206,  206,  206,  206,  206,  206,  810,  213,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  622,
      699,  647,  102,  686,  592,  674,  214,  215,  206,  206,
      206,  206,  206,  206,  153,  218,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  155,  209,  209,  209,  209,
      209,  209,  214,  215,  647,  584,  671,  669,  657,  547,
      647,  218,  584,  496,  505,  102,  584,  496,  219,  220,
      222,  224,  209,  209,  209,  209,  209,  209,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  225,  211,  211,
      211,  211,  211,  211,  219,  220,  222,  224,  102,  610,
      600,  596,  448,  226,  584,  496,  581,  578,  396,  102,
      227,  496,  385,  225,  211,  211,  211,  211,  211,  211,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  226,
      212,  212,  212,  212,  212,  212,  227,  228,  233,  235,

      236,  237,  240,  241,  242,  238,  229,  230,  231,  239,
      243,  244,  245,  234,  246,  385,  212,  212,  212,  212,
      212,  212,  250,  228,  233,  235,  236,  237,  240,  241,
      242,  238,  229,  230,  231,  239,  243,  244,  245,  234,
      246,  247,  251,  254,  255,  256,  273,  274,  250,  275,
      276,  278,  280,  252,  277,  279,  248,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  810,  247,  251,  254,
      255,  256,  273,  274,  529,  275,  276,  278,  280,  252,
      277,  279,  248,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  203,  509,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  205,  264,  264,  264,  264,  264,  264,
      810,  329,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  496,  385,  102,  478,  468,  271,  281,  102,  385,
      264,  264,  264,  264,  264,  264,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  282,  266,  266,  266,  266,
      266,  266,  267,  281,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  261,  441,  399,  205,  385,  261,  261,
      380,  282,  266,  266,  266,  266,  266,  266,  153,  376,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  155,
      269,  269,  269,  269,  269,  269,  810,  286,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  369,  368,  365,
      351,  344,  155,  102,  261,  287,  269,  269,  269,  269,
      269,  269,  153,  286,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  271,  272,  272,  272,  272,  272,  272,
      810,  287,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  283,  288,  289,  290,  291,  292,  293,  284,  294,
      272,  272,  272,  272,  272,  272,  285,  297,  298,  299,
      300,  295,  301,  302,  303,  305,  306,  283,  288,  289,
      290,  291,  292,  293,  284,  294,  296,  307,  308,  309,
      310,  311,  285,  297,  298,  299,  300,  295,  301,  302,

      303,  305,  306,  312,  313,  314,  315,  316,  317,  318,
      320,  321,  296,  307,  308,  309,  310,  311,  325,  150,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  312,
      313,  314,  315,  316,  317,  318,  320,  321,  203,  102,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  205,
      327,  327,  327,  327,  327,  327,  810,  337,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  327,  327,  327,  327,
      327,  327,  203,  337,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  329,  330,  330,  330,  330,  330,  330,

      810,  338,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  319,  304,  339,  810,  261,  150,  258,  810,  257,
      330,  330,  330,  330,  330,  330,  153,  338,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  155,  153,  339,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  271,
      334,  334,  334,  334,  334,  334,  810,  253,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  249,  232,  223,
      221,  217,  340,  341,  342,  343,  334,  334,  334,  334,
      334,  334,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  345,  336,  336,  336,  336,  336,  336,  340,  341,

      342,  343,  346,  347,  348,  349,  350,  352,  353,  354,
      355,  356,  357,  358,  359,  360,  361,  345,  336,  336,
      336,  336,  336,  336,  362,  366,  367,  370,  346,  347,
      348,  349,  350,  352,  353,  354,  355,  356,  357,  358,
      359,  360,  361,  363,  371,  372,  373,  374,  375,  377,
      362,  366,  367,  370,  378,  379,  364,  381,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  216,  102,  363,
      371,  372,  373,  374,  375,  377,  150,  150,  189,  179,
      378,  379,  364,  381,  203,  174,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  205,  203,  164,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  329,  389,  389,
      389,  389,  389,  389,  810,  150,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  102,  126,  102,   45,   46,
       43,  398,   96,   54,  389,  389,  389,  389,  389,  389,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  400,
      391,  391,  391,  391,  391,  391,  392,  398,  331,  331,
      331,  331,  331,  331,  331,  331,  331,   46,  401,   43,
      810,   37,   37,  810,  810,  400,  391,  391,  391,  391,
      391,  391,  153,  810,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  153,  401,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  271,  394,  394,  394,  394,  394,
      394,  810,  402,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  810,  810,  810,  810,  810,  810,  810,  810,
      403,  394,  394,  394,  394,  394,  394,  153,  402,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  396,  397,
      397,  397,  397,  397,  397,  810,  403,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  404,  408,  409,  410,
      411,  412,  413,  414,  415,  397,  397,  397,  397,  397,
      397,  405,  416,  417,  418,  419,  420,  406,  421,  407,
      422,  423,  404,  408,  409,  410,  411,  412,  413,  414,

      415,  424,  425,  426,  427,  428,  429,  405,  416,  417,
      418,  419,  420,  406,  421,  407,  422,  423,  430,  431,
      432,  433,  434,  435,  436,  437,  438,  424,  425,  426,
      427,  428,  429,  439,  440,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  810,  810,  810,  810,  810,  455,  439,
      440,  444,  810,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  203,  810,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  203,  455,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  329,  446,  446,  446,  446,  446,

      446,  810,  456,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  810,  810,  810,  810,  810,  810,  810,  810,
      457,  446,  446,  446,  446,  446,  446,  203,  456,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  448,  449,
      449,  449,  449,  449,  449,  810,  457,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  810,  810,  458,  810,
      810,  810,  810,  810,  810,  449,  449,  449,  449,  449,
      449,  153,  810,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  271,  153,  458,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  396,  452,  452,  452,  452,  452,

      452,  810,  810,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  810,  810,  810,  810,  810,  459,  460,  461,
      462,  452,  452,  452,  452,  452,  452,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  463,  454,  454,  454,
      454,  454,  454,  459,  460,  461,  462,  464,  465,  466,
      467,  469,  470,  471,  472,  473,  474,  475,  476,  477,
      479,  480,  463,  454,  454,  454,  454,  454,  454,  481,
      482,  483,  484,  464,  465,  466,  467,  469,  470,  471,
      472,  473,  474,  475,  476,  477,  479,  480,  485,  486,
      487,  488,  489,  490,  491,  481,  482,  483,  484,  492,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  810,
      810,  507,  810,  810,  485,  486,  487,  488,  489,  490,
      491,  810,  810,  810,  203,  492,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  329,  203,  507,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  448,  499,  499,
      499,  499,  499,  499,  810,  810,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  499,  499,  499,  499,  499,  499,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  508,
      501,  501,  501,  501,  501,  501,  810,  510,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  810,  810,  810,
      810,  810,  810,  810,  810,  508,  501,  501,  501,  501,
      501,  501,  153,  510,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  396,  503,  503,  503,  503,  503,  503,
      810,  511,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  810,  810,  810,  810,  810,  810,  810,  512,  513,
      503,  503,  503,  503,  503,  503,  153,  511,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  505,  506,  506,
      506,  506,  506,  506,  512,  513,  514,  515,  516,  517,
      518,  519,  520,  521,  522,  523,  524,  525,  526,  530,

      531,  532,  533,  527,  506,  506,  506,  506,  506,  506,
      528,  534,  514,  515,  516,  517,  518,  519,  520,  521,
      522,  523,  524,  525,  526,  530,  531,  532,  533,  527,
      535,  536,  537,  538,  539,  540,  528,  534,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  810,  810,  810,
      810,  810,  810,  810,  810,  553,  535,  536,  537,  538,
      539,  540,  203,  810,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  448,  545,  545,  545,  545,  545,  545,
      810,  553,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  810,  810,  810,  810,  810,  810,  810,  810,  554,

      545,  545,  545,  545,  545,  545,  203,  810,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  548,  548,
      548,  548,  548,  548,  810,  554,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  810,  810,  555,  810,  810,
      810,  810,  810,  810,  548,  548,  548,  548,  548,  548,
      153,  810,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  396,  153,  555,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  505,  550,  550,  550,  550,  550,  550,
      810,  810,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  810,  810,  810,  810,  810,  556,  557,  558,  559,

      550,  550,  550,  550,  550,  550,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  560,  552,  552,  552,  552,
      552,  552,  556,  557,  558,  559,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  810,  572,  573,  574,  575,
      576,  560,  552,  552,  552,  552,  552,  552,  577,  579,
      580,  594,  561,  562,  563,  564,  565,  566,  567,  568,
      569,  570,  572,  573,  574,  575,  576,  810,  571,  810,
      810,  810,  810,  810,  577,  579,  580,  594,  810,  810,
      595,  810,  810,  810,  810,  810,  810,  570,  810,  810,
      810,  810,  810,  203,  571,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  448,  203,  595,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  547,  586,  586,  586,
      586,  586,  586,  810,  810,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  810,  810,  810,  810,  810,  810,
      597,  810,  810,  586,  586,  586,  586,  586,  586,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  598,  588,
      588,  588,  588,  588,  588,  810,  597,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  810,  810,  810,  810,
      810,  810,  810,  810,  598,  588,  588,  588,  588,  588,
      588,  153,  810,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  505,  590,  590,  590,  590,  590,  590,  810,
      599,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      810,  810,  810,  810,  810,  810,  810,  601,  602,  590,
      590,  590,  590,  590,  590,  153,  599,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  593,  593,  593,
      593,  593,  593,  601,  602,  603,  604,  605,  606,  607,
      608,  609,  611,  612,  613,  614,  615,  810,  628,  810,
      810,  810,  810,  593,  593,  593,  593,  593,  593,  810,
      810,  603,  604,  605,  606,  607,  608,  609,  611,  612,
      613,  614,  615,  203,  628,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  547,  620,  620,  620,  620,  620,
      620,  810,  629,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  810,  810,  810,  810,  810,  810,  810,  810,
      630,  620,  620,  620,  620,  620,  620,  203,  629,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  622,  623,
      623,  623,  623,  623,  623,  810,  630,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  810,  810,  633,  810,
      810,  810,  810,  810,  810,  623,  623,  623,  623,  623,
      623,  153,  810,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  505,  153,  633,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  592,  625,  625,  625,  625,  625,
      625,  810,  810,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  810,  810,  810,  810,  810,  810,  634,  635,
      636,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  637,  627,  627,  627,
      627,  627,  627,  631,  634,  635,  636,  638,  639,  632,
      640,  641,  642,  643,  810,  658,  810,  810,  810,  810,
      810,  810,  637,  627,  627,  627,  627,  627,  627,  631,
      810,  810,  810,  638,  639,  632,  640,  641,  642,  643,
      203,  658,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  547,  203,  810,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  622,  649,  649,  649,  649,  649,  649,
      810,  810,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  810,  810,  810,  810,  810,  810,  659,  810,  810,
      649,  649,  649,  649,  649,  649,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  660,  651,  651,  651,  651,
      651,  651,  810,  659,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  810,  810,  810,  810,  810,  810,  810,
      810,  660,  651,  651,  651,  651,  651,  651,  153,  810,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  592,

      653,  653,  653,  653,  653,  653,  810,  661,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  810,  810,  810,
      810,  810,  810,  810,  662,  663,  653,  653,  653,  653,
      653,  653,  153,  661,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  656,  656,  656,  656,  656,  656,
      662,  663,  664,  665,  666,  667,  668,  670,  810,  684,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  810,
      656,  656,  656,  656,  656,  656,  810,  685,  664,  665,
      666,  667,  668,  670,  203,  684,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  622,  676,  676,  676,  676,

      676,  676,  810,  685,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  810,  810,  810,  810,  810,  810,  810,
      810,  687,  676,  676,  676,  676,  676,  676,  203,  810,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  678,
      679,  679,  679,  679,  679,  679,  153,  687,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  592,  810,  810,
      810,  810,  810,  810,  810,  688,  679,  679,  679,  679,
      679,  679,  153,  810,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  655,  681,  681,  681,  681,  681,  681,
      810,  688,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  810,  810,  810,  810,  810,  689,  690,  691,  692,
      681,  681,  681,  681,  681,  681,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  693,  683,  683,  683,  683,
      683,  683,  689,  690,  691,  692,  694,  695,  203,  710,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  622,
      810,  693,  683,  683,  683,  683,  683,  683,  810,  810,
      810,  810,  694,  695,  203,  710,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  678,  702,  702,  702,  702,
      702,  702,  810,  810,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  810,  810,  810,  810,  810,  810,  711,

      810,  810,  702,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  716,  704,  704,
      704,  704,  704,  704,  810,  711,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  810,  810,  810,  810,  810,
      810,  810,  810,  716,  704,  704,  704,  704,  704,  704,
      153,  810,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  655,  706,  706,  706,  706,  706,  706,  810,  717,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  810,
      810,  810,  810,  810,  810,  810,  718,  719,  706,  706,
      706,  706,  706,  706,  153,  717,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  708,  709,  709,  709,  709,
      709,  709,  718,  719,  720,  721,  722,  810,  735,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  810,  810,
      810,  810,  709,  709,  709,  709,  709,  709,  810,  810,
      720,  721,  722,  203,  735,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  678,  729,  729,  729,  729,  729,
      729,  810,  736,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  741,  810,  810,  810,  810,  810,  810,  810,
      742,  729,  729,  729,  729,  729,  729,  203,  736,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  741,  731,

      731,  731,  731,  731,  731,  153,  742,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  655,  810,  810,  810,
      810,  810,  810,  810,  743,  731,  731,  731,  731,  731,
      731,  153,  810,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  708,  733,  733,  733,  733,  733,  733,  810,
      743,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      744,  745,  746,  810,  756,  810,  810,  810,  810,  733,
      733,  733,  733,  733,  733,  810,  757,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  744,  745,  746,  203,
      756,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      678,  203,  757,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  762,  752,  752,  752,  752,  752,  752,  810,
      763,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      810,  810,  810,  810,  810,  810,  810,  764,  762,  752,
      752,  752,  752,  752,  752,  153,  763,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  708,  754,  754,  754,
      754,  754,  754,  764,  810,  810,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  810,  810,  810,  810,  810,
      810,  810,  772,  754,  754,  754,  754,  754,  754,  203,
      810,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      773,  770,  770,  770,  770,  770,  770,  153,  772,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  708,  774,
      779,  780,  785,  786,  810,  810,  773,  770,  770,  770,
      770,  770,  770,  203,  810,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  810,  774,  779,  780,  785,  786,
       36,   36,   36,   36,   38,   38,   38,   38,   42,   42,
       42,   42,   44,  810,   44,   44,   45,   45,   45,   45,
       97,  810,   97,   97,  101,  101,  148,  148,  149,  149,
      200,  200,  201,  201,  202,  202,  259,  259,  260,  260,
      322,  322,  323,  323,  324,  324,  382,  382,  383,  383,

      384,  384,  442,  442,  443,  443,  493,  493,  494,  494,
      495,  495,  541,  541,  542,  542,  543,  543,  442,  442,
      582,  582,  583,  583,  616,  616,  617,  617,  618,  618,
      644,  644,  645,  645,  646,  646,  542,  542,  672,  672,
      673,  673,  696,  696,  697,  697,  698,  698,  723,  723,
      724,  724,  726,  726,  617,  617,  748,  748,  749,  749,
      765,  765,  766,  766,  767,  767,  775,  775,  776,  776,
      672,  672,  782,  782,  783,  783,  787,  787,  788,  788,
      790,  790,  791,  791,  792,  792,  724,  724,  795,  795,
      797,  797,  798,  798,  799,  799,  802,  802,  805,  805,

      806,  806,  808,  808,  809,  809,    7,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810
    } ;

static yyconst flex_int16_t yy_chk[3982] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       28,  894,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   33,   35,   25,   17,   28,   26,   57,   34,
       39,   39,   25,   34,   40,   40,   16,   41,   41,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   33,   35,
       25,  125,  125,   26,   57,   34,  890,  713,   25,   34,
      713,  888,   16,   19,   19,  884,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  878,
       20,   58,   22,   29,   22,   60,   27,   61,   20,   30,
       62,   63,   22,   30,   27,   20,  872,   29,  871,   22,
       27,  868,   22,   30,   20,   27,   20,   58,   22,   29,
       22,   60,   27,   61,   20,   30,   62,   63,   22,   30,
       27,   20,   21,   29,   21,   22,   27,   21,   22,   30,
       64,   27,   21,   21,   23,   65,   23,   66,   67,   21,
       68,   69,   70,   72,   23,   73,   74,   23,   21,   75,
       21,   23,  864,   21,  863,  859,   64,  855,   21,   21,
       23,   65,   23,   66,   67,   21,   68,   69,   70,   72,

       23,   73,   74,   23,  818,   75,  809,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   31,   24,   32,   32,   77,   78,
       31,   24,   31,   80,  808,   32,   81,   83,   24,   84,
       85,   31,   71,   32,   24,   24,   24,   24,   24,   24,
       31,   24,  806,  805,   77,   78,   31,   24,   31,   80,
       71,   32,   81,   83,   24,   84,   85,   31,   71,   32,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   71,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   86,  687,  687,

      687,  804,  687,  803,   91,   92,   49,   49,   49,   49,
       49,   49,   93,   49,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   86,   54,   54,   54,   54,   54,   54,
       91,   92,  802,  801,  799,  798,  796,  795,   93,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  794,   94,
       54,   54,   54,   54,   54,   54,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   82,   56,   87,   94,   95,  107,  108,   82,
      109,  110,   82,  111,  112,  114,   82,  115,  116,  117,
      118,   87,   56,   56,   56,   56,   56,   56,   82,   56,

       87,  792,   95,  107,  108,   82,  109,  110,   82,  111,
      112,  114,   82,  115,  116,  117,  118,   87,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  105,   98,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  119,  791,  790,  789,  788,
      787,  783,  120,  121,   98,   98,   98,   98,   98,   98,
      122,   98,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  119,  102,  102,  102,  102,  102,  102,  120,  121,
      782,  781,  777,  776,  775,  767,  122,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  124,  126,  102,  102,

      102,  102,  102,  102,  104,  128,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  124,  126,  766,  765,  754,  750,  749,  748,
      747,  128,  740,  739,  738,  737,  729,  726,  129,  130,
      131,  132,  104,  104,  104,  104,  104,  104,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  129,  130,  131,  132,  133,  134,
      135,  136,  138,  139,  140,  141,  142,  143,  144,  145,
      724,  723,  715,  714,  106,  106,  106,  106,  106,  106,
      706,  700,  699,  698,  133,  134,  135,  136,  138,  139,

      140,  141,  142,  143,  144,  145,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  152,  146,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  146,  146,  146,  146,  146,  146,  697,  146,
      151,  696,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  156,  158,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  676,
      673,  672,  671,  659,  653,  647,  158,  160,  151,  151,
      151,  151,  151,  151,  154,  163,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  158,  160,  646,  645,  644,  642,  628,  620,
      618,  163,  617,  616,  590,  584,  583,  582,  164,  165,
      167,  170,  154,  154,  154,  154,  154,  154,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  171,  155,  155,
      155,  155,  155,  155,  164,  165,  167,  170,  581,  574,
      560,  556,  545,  172,  543,  542,  541,  538,  503,  496,
      173,  495,  494,  171,  155,  155,  155,  155,  155,  155,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  172,
      157,  157,  157,  157,  157,  157,  173,  174,  177,  178,

      179,  180,  182,  183,  184,  181,  174,  174,  174,  181,
      185,  186,  187,  177,  188,  493,  157,  157,  157,  157,
      157,  157,  191,  174,  177,  178,  179,  180,  182,  183,
      184,  181,  174,  174,  174,  181,  185,  186,  187,  177,
      188,  189,  192,  194,  195,  196,  213,  214,  191,  215,
      216,  217,  218,  192,  216,  217,  189,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  189,  192,  194,
      195,  196,  213,  214,  479,  215,  216,  217,  218,  192,
      216,  217,  189,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  204,  457,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      206,  446,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  443,  442,  441,  425,  412,  394,  219,  385,  384,
      204,  204,  204,  204,  204,  204,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  220,  205,  205,  205,  205,
      205,  205,  207,  219,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  383,  382,  338,  327,  324,  323,  322,
      320,  220,  205,  205,  205,  205,  205,  205,  208,  315,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  209,  222,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  307,  306,  303,
      289,  280,  269,  261,  260,  223,  208,  208,  208,  208,
      208,  208,  210,  222,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  223,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  221,  225,  226,  227,  228,  229,  230,  221,  231,
      210,  210,  210,  210,  210,  210,  221,  233,  234,  235,
      236,  232,  237,  238,  239,  241,  242,  221,  225,  226,
      227,  228,  229,  230,  221,  231,  232,  243,  244,  245,
      246,  247,  221,  233,  234,  235,  236,  232,  237,  238,

      239,  241,  242,  248,  249,  250,  251,  252,  253,  254,
      256,  257,  232,  243,  244,  245,  246,  247,  262,  259,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  248,
      249,  250,  251,  252,  253,  254,  256,  257,  263,  258,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  264,  273,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  263,  263,  263,  263,
      263,  263,  265,  273,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      266,  274,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  255,  240,  275,  212,  202,  201,  200,  199,  197,
      265,  265,  265,  265,  265,  265,  268,  274,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  270,  275,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  272,  193,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  190,  176,  168,
      166,  162,  276,  277,  278,  279,  270,  270,  270,  270,
      270,  270,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  281,  271,  271,  271,  271,  271,  271,  276,  277,

      278,  279,  283,  284,  285,  286,  288,  290,  291,  292,
      293,  294,  295,  296,  297,  298,  299,  281,  271,  271,
      271,  271,  271,  271,  300,  304,  305,  308,  283,  284,
      285,  286,  288,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  302,  309,  311,  312,  313,  314,  317,
      300,  304,  305,  308,  318,  319,  302,  321,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  161,  150,  302,
      309,  311,  312,  313,  314,  317,  149,  148,  137,  127,
      318,  319,  302,  321,  326,  123,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  328,  113,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  330,  101,  330,  330,  330,  330,
      330,  330,  330,  330,  330,   99,   76,   50,   46,   45,
       42,  337,   37,   18,  328,  328,  328,  328,  328,  328,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  339,
      329,  329,  329,  329,  329,  329,  331,  337,  331,  331,
      331,  331,  331,  331,  331,  331,  331,   14,  340,   12,
        7,    4,    3,    0,    0,  339,  329,  329,  329,  329,
      329,  329,  332,    0,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  333,  340,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  334,  341,  334,  334,  334,  334,  334,  334,  334,
      334,  334,    0,    0,    0,    0,    0,    0,    0,    0,
      342,  333,  333,  333,  333,  333,  333,  335,  341,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,  342,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  343,  345,  347,  348,
      349,  350,  351,  352,  353,  335,  335,  335,  335,  335,
      335,  344,  354,  355,  356,  357,  358,  344,  359,  344,
      360,  361,  343,  345,  347,  348,  349,  350,  351,  352,

      353,  362,  363,  364,  365,  366,  367,  344,  354,  355,
      356,  357,  358,  344,  359,  344,  360,  361,  368,  369,
      372,  373,  374,  375,  376,  377,  379,  362,  363,  364,
      365,  366,  367,  380,  381,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  368,  369,  372,  373,  374,  375,
      376,  377,  379,    0,    0,    0,    0,    0,  398,  380,
      381,  386,    0,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  387,    0,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  388,  398,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  389,  399,  389,  389,  389,  389,  389,  389,  389,
      389,  389,    0,    0,    0,    0,    0,    0,    0,    0,
      400,  388,  388,  388,  388,  388,  388,  390,  399,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  391,  400,  391,  391,  391,
      391,  391,  391,  391,  391,  391,    0,    0,  401,    0,
        0,    0,    0,    0,    0,  390,  390,  390,  390,  390,
      390,  393,    0,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  395,  401,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  397,    0,  397,  397,  397,  397,  397,  397,  397,
      397,  397,    0,    0,    0,    0,    0,  402,  403,  404,
      405,  395,  395,  395,  395,  395,  395,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  406,  396,  396,  396,
      396,  396,  396,  402,  403,  404,  405,  407,  408,  410,
      411,  413,  415,  416,  419,  420,  421,  422,  423,  424,
      426,  427,  406,  396,  396,  396,  396,  396,  396,  428,
      429,  430,  431,  407,  408,  410,  411,  413,  415,  416,
      419,  420,  421,  422,  423,  424,  426,  427,  432,  433,
      434,  435,  436,  437,  438,  428,  429,  430,  431,  439,

      444,  444,  444,  444,  444,  444,  444,  444,  444,    0,
        0,  455,    0,    0,  432,  433,  434,  435,  436,  437,
      438,    0,    0,    0,  445,  439,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  447,  455,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  449,    0,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  447,  447,  447,  447,  447,  447,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  456,
      448,  448,  448,  448,  448,  448,  452,  458,  452,  452,

      452,  452,  452,  452,  452,  452,  452,    0,    0,    0,
        0,    0,    0,    0,    0,  456,  448,  448,  448,  448,
      448,  448,  451,  458,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      454,  459,  454,  454,  454,  454,  454,  454,  454,  454,
      454,    0,    0,    0,    0,    0,    0,    0,  460,  461,
      451,  451,  451,  451,  451,  451,  453,  459,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  460,  461,  462,  463,  464,  465,
      467,  468,  469,  470,  472,  473,  474,  475,  477,  480,

      481,  482,  483,  478,  453,  453,  453,  453,  453,  453,
      478,  484,  462,  463,  464,  465,  467,  468,  469,  470,
      472,  473,  474,  475,  477,  480,  481,  482,  483,  478,
      485,  486,  487,  489,  491,  492,  478,  484,  497,  497,
      497,  497,  497,  497,  497,  497,  497,    0,    0,    0,
        0,    0,    0,    0,    0,  507,  485,  486,  487,  489,
      491,  492,  498,    0,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  507,  499,  499,  499,  499,  499,  499,  499,  499,
      499,    0,    0,    0,    0,    0,    0,    0,    0,  508,

      498,  498,  498,  498,  498,  498,  500,    0,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  501,  508,  501,  501,  501,  501,
      501,  501,  501,  501,  501,    0,    0,  509,    0,    0,
        0,    0,    0,    0,  500,  500,  500,  500,  500,  500,
      502,    0,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  504,  509,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      506,    0,  506,  506,  506,  506,  506,  506,  506,  506,
      506,    0,    0,    0,    0,    0,  510,  511,  512,  513,

      504,  504,  504,  504,  504,  504,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  514,  505,  505,  505,  505,
      505,  505,  510,  511,  512,  513,  515,  516,  518,  519,
      520,  522,  523,  527,  528,    0,  530,  531,  532,  533,
      534,  514,  505,  505,  505,  505,  505,  505,  537,  539,
      540,  554,  515,  516,  518,  519,  520,  522,  523,  527,
      528,  529,  530,  531,  532,  533,  534,    0,  529,    0,
        0,    0,    0,    0,  537,  539,  540,  554,    0,    0,
      555,    0,    0,    0,    0,    0,    0,  529,    0,    0,
        0,    0,    0,  544,  529,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  546,  555,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  548,    0,  548,  548,  548,  548,  548,
      548,  548,  548,  548,    0,    0,    0,    0,    0,    0,
      557,    0,    0,  546,  546,  546,  546,  546,  546,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  558,  547,
      547,  547,  547,  547,  547,  550,  557,  550,  550,  550,
      550,  550,  550,  550,  550,  550,    0,    0,    0,    0,
        0,    0,    0,    0,  558,  547,  547,  547,  547,  547,
      547,  549,    0,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  552,
      559,  552,  552,  552,  552,  552,  552,  552,  552,  552,
        0,    0,    0,    0,    0,    0,    0,  562,  563,  549,
      549,  549,  549,  549,  549,  551,  559,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  562,  563,  564,  568,  569,  570,  571,
      572,  573,  575,  576,  577,  578,  579,    0,  595,    0,
        0,    0,    0,  551,  551,  551,  551,  551,  551,    0,
        0,  564,  568,  569,  570,  571,  572,  573,  575,  576,
      577,  578,  579,  585,  595,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  586,  596,  586,  586,  586,  586,  586,  586,  586,
      586,  586,    0,    0,    0,    0,    0,    0,    0,    0,
      598,  585,  585,  585,  585,  585,  585,  587,  596,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  588,  598,  588,  588,  588,
      588,  588,  588,  588,  588,  588,    0,    0,  603,    0,
        0,    0,    0,    0,    0,  587,  587,  587,  587,  587,
      587,  589,    0,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  591,  603,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  593,    0,  593,  593,  593,  593,  593,  593,  593,
      593,  593,    0,    0,    0,    0,    0,    0,  604,  605,
      606,  591,  591,  591,  591,  591,  591,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  607,  592,  592,  592,
      592,  592,  592,  600,  604,  605,  606,  608,  610,  600,
      611,  612,  614,  615,    0,  629,    0,    0,    0,    0,
        0,    0,  607,  592,  592,  592,  592,  592,  592,  600,
        0,    0,    0,  608,  610,  600,  611,  612,  614,  615,
      619,  629,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  621,    0,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      623,    0,  623,  623,  623,  623,  623,  623,  623,  623,
      623,    0,    0,    0,    0,    0,    0,  631,    0,    0,
      621,  621,  621,  621,  621,  621,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  632,  622,  622,  622,  622,
      622,  622,  625,  631,  625,  625,  625,  625,  625,  625,
      625,  625,  625,    0,    0,    0,    0,    0,    0,    0,
        0,  632,  622,  622,  622,  622,  622,  622,  624,    0,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  627,  634,  627,  627,
      627,  627,  627,  627,  627,  627,  627,    0,    0,    0,
        0,    0,    0,    0,  635,  636,  624,  624,  624,  624,
      624,  624,  626,  634,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      635,  636,  637,  638,  639,  640,  641,  643,  649,  657,
      649,  649,  649,  649,  649,  649,  649,  649,  649,    0,
      626,  626,  626,  626,  626,  626,    0,  658,  637,  638,
      639,  640,  641,  643,  648,  657,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  651,  658,  651,  651,  651,  651,  651,  651,
      651,  651,  651,    0,    0,    0,    0,    0,    0,    0,
        0,  660,  648,  648,  648,  648,  648,  648,  650,    0,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  652,  660,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,    0,    0,
        0,    0,    0,    0,    0,  661,  650,  650,  650,  650,
      650,  650,  654,    0,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      656,  661,  656,  656,  656,  656,  656,  656,  656,  656,

      656,    0,    0,    0,    0,    0,  662,  663,  664,  665,
      654,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  666,  655,  655,  655,  655,
      655,  655,  662,  663,  664,  665,  668,  669,  675,  684,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
        0,  666,  655,  655,  655,  655,  655,  655,    0,    0,
        0,    0,  668,  669,  677,  684,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  679,    0,  679,  679,  679,  679,  679,  679,
      679,  679,  679,    0,    0,    0,    0,    0,    0,  685,

        0,    0,  677,  677,  677,  677,  677,  677,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  688,  678,  678,
      678,  678,  678,  678,  681,  685,  681,  681,  681,  681,
      681,  681,  681,  681,  681,    0,    0,    0,    0,    0,
        0,    0,    0,  688,  678,  678,  678,  678,  678,  678,
      680,    0,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  683,  689,
      683,  683,  683,  683,  683,  683,  683,  683,  683,    0,
        0,    0,    0,    0,    0,    0,  690,  691,  680,  680,
      680,  680,  680,  680,  682,  689,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  690,  691,  692,  693,  695,  702,  710,  702,
      702,  702,  702,  702,  702,  702,  702,  702,    0,    0,
        0,    0,  682,  682,  682,  682,  682,  682,    0,    0,
      692,  693,  695,  701,  710,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  704,  711,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  716,    0,    0,    0,    0,    0,    0,    0,
      718,  701,  701,  701,  701,  701,  701,  703,  711,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  716,  703,

      703,  703,  703,  703,  703,  705,  718,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,    0,    0,    0,
        0,    0,    0,    0,  719,  703,  703,  703,  703,  703,
      703,  707,    0,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  709,
      719,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      720,  721,  722,    0,  735,    0,    0,    0,    0,  707,
      707,  707,  707,  707,  707,  731,  736,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  720,  721,  722,  728,
      735,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  730,  736,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  742,  730,  730,  730,  730,  730,  730,  733,
      745,  733,  733,  733,  733,  733,  733,  733,  733,  733,
        0,    0,    0,    0,    0,    0,    0,  746,  742,  730,
      730,  730,  730,  730,  730,  732,  745,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  746,  752,    0,  752,  752,  752,  752,
      752,  752,  752,  752,  752,    0,    0,    0,    0,    0,
        0,    0,  756,  732,  732,  732,  732,  732,  732,  751,
        0,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      757,  751,  751,  751,  751,  751,  751,  753,  756,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  764,
      772,  774,  779,  780,    0,    0,  757,  751,  751,  751,
      751,  751,  751,  769,    0,  769,  769,  769,  769,  769,
      769,  769,  769,  769,    0,  764,  772,  774,  779,  780,
      811,  811,  811,  811,  812,  812,  812,  812,  813,  813,
      813,  813,  814,    0,  814,  814,  815,  815,  815,  815,
      816,    0,  816,  816,  817,  817,  819,  819,  820,  820,
      821,  821,  822,  822,  823,  823,  824,  824,  825,  825,
      826,  826,  827,  827,  828,  828,  829,  829,  830,  830,

      831,  831,  832,  832,  833,  833,  834,  834,  835,  835,
      836,  836,  837,  837,  838,  838,  839,  839,  840,  840,
      841,  841,  842,  842,  843,  843,  844,  844,  845,  845,
      846,  846,  847,  847,  848,  848,  849,  849,  850,  850,
      851,  851,  852,  852,  853,  853,  854,  854,  856,  856,
      857,  857,  858,  858,  860,  860,  861,  861,  862,  862,
      865,  865,  866,  866,  867,  867,  869,  869,  870,  870,
      873,  873,  874,  874,  875,  875,  876,  876,  877,  877,
      879,  879,  880,  880,  881,  881,  882,  882,  883,  883,
      885,  885,  886,  886,  887,  887,  889,  889,  891,  891,

      892,  892,  893,  893,  895,  895,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[95] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 811 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3907 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::REQUEST_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
;
	YY_BREAK
case 76:
YY_RULE_SETUP
;
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 80:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))	
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }
   
   return ClntParser::DUID_;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 94:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 811 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 811 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 810);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

