#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 121
#define YY_END_OF_BUFFER 122
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1004] =
    {   0,
        1,    1,    0,    0,    0,    0,  122,  120,    2,    1,
        1,  120,  102,  120,  120,  119,  119,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      106,  106,  121,    1,    1,    1,    0,  114,  102,    0,
      114,  104,  103,  119,    0,    0,  118,    0,  111,   85,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       99,  115,  115,   87,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,   17,   18,  115,  115,  115,
      115,  115,  115,  115,  115,  105,  103,  119,    0,    0,
        0,  110,  116,  109,  109,  115,  115,  115,  115,  115,
       86,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       98,  119,    0,    0,    0,    0,  108,  108,    0,  109,
        0,  109,  115,  115,  115,   65,  115,  115,  115,  115,

      115,  115,  115,  115,   93,  115,  115,  115,   31,  115,
      115,   45,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,  115,  115,  115,  115,  115,  115,   24,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  100,  115,  115,  115,  115,  119,
        0,  117,    0,    0,    0,  108,    0,  108,    0,  109,
      109,  109,  109,  115,  115,  115,  115,   92,  115,  115,
      115,    4,  115,  115,  115,  115,  115,  115,  115,  101,
      115,  115,    3,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    0,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,    7,  115,   44,  115,
       25,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,    0,    0,    0,    0,  108,  108,  108,
      108,    0,  109,  109,  109,    0,  109,  115,  115,  115,
      115,  115,  115,  115,  115,  115,   30,  115,  115,  115,
      115,  115,   38,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,    0,    0,
      115,  115,  115,   36,  115,  115,  115,  115,   34,  115,
      115,  115,   61,  115,  115,  115,   96,  115,  115,  115,
      115,  115,  115,  115,    0,    0,    0,    0,  108,  108,

      108,    0,  108,    0,    0,  109,  109,  109,  109,  115,
      115,   33,  115,  115,  115,  115,  115,  115,    0,  115,
      115,   95,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,    0,    0,  115,  115,  115,  115,  115,   59,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       22,  115,  115,  115,  117,    0,    0,    0,    0,    0,
      108,  108,  108,  108,    0,  109,  109,  109,    0,  109,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,    0,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,   46,  115,   55,  115,
      115,   12,   10,   84,  115,   43,    0,    0,  115,  115,
      115,   57,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,    5,  115,  115,  115,   14,    0,    0,
        0,    0,  108,  108,  108,    0,  108,  113,  109,  109,
      109,  109,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       11,   64,    0,    0,  115,  115,  115,   58,  115,  115,
      115,  115,  115,   32,  115,  115,    6,   94,   40,  115,

      115,    0,    0,    0,    0,  112,  108,  108,  108,  108,
      109,  109,  109,    0,  109,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   56,  115,    0,  115,  115,  115,
      115,  115,  115,  115,  115,   37,  115,  115,   35,  115,
      115,  115,   13,    0,    0,   52,   51,   39,  115,   23,
      115,  115,  115,   42,   41,  115,  115,  117,    0,    0,
      108,  108,  108,    0,  108,  109,  109,  109,  109,  115,
       15,  115,   63,  115,  115,  115,   72,  115,  115,    0,
      115,  115,  115,  115,  115,  115,   75,  115,  115,  115,
      115,  115,  115,   54,   53,  115,  115,  115,  115,  115,

       60,    0,    0,    0,    0,  108,  108,  108,  108,  109,
      109,  109,    0,  109,  115,  115,   97,   74,  115,  115,
      115,    0,   83,  115,  115,  115,   50,  115,   76,   62,
      115,  115,  115,    8,  115,  115,   26,  115,  115,    0,
        0,    0,  108,  108,  108,    0,  108,  109,  109,  109,
      109,  115,  115,   73,  115,  115,    0,  115,  115,   49,
      115,  115,  115,  115,   66,  115,  115,  115,  115,  115,
      117,    0,    0,    0,  108,  108,  108,  108,  109,  109,
      109,    0,  109,  115,  115,  115,  115,    0,  115,  115,
      115,  115,  115,  115,  115,  115,  115,   16,   21,    0,

        0,  107,  110,  108,  108,  108,    0,  108,  109,  109,
      109,  109,  115,  115,  115,   28,    0,    0,  115,  115,
      115,   77,  115,  115,   27,  115,  115,  115,    0,    0,
      107,    0,  108,  108,  108,  108,  108,  109,  109,  109,
        0,  109,  115,  115,  115,    0,    0,   29,  115,  115,
       78,  115,  115,  115,  115,  115,  115,  115,  117,  107,
      110,  108,    0,  108,  108,  108,  108,  109,  109,  109,
       67,  115,  115,  115,  115,    0,    0,  115,  115,  115,
      115,  115,  115,   48,  115,   20,  115,    0,  107,  108,
      108,  108,  108,  109,  109,  109,  115,  115,  115,  115,

      115,    0,    0,  115,  115,   79,   80,   81,   82,    9,
       19,    0,  108,  108,    0,  108,  108,  109,   47,  115,
      115,  115,  115,    0,    0,  115,  115,  117,  108,  108,
      109,  115,  115,  115,  115,    0,    0,    0,  115,  115,
      115,    0,  108,  108,    0,  115,  115,  115,  115,    0,
        0,    0,   88,  115,  115,  115,   88,  107,  108,  108,
       68,  115,  115,  115,    0,   90,    0,  115,   90,  115,
      107,  108,  108,    0,  115,  115,   71,    0,   89,  115,
       89,    0,  108,  108,  115,   69,   91,   91,    0,  108,
      108,    0,   70,  117,  108,  108,    0,  108,  108,    0,

      108,  108,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1094] =
    {   0,
        0,    0, 1132, 1131,    0,    0, 1138, 5810, 5810,   73,
       75, 1132,    0, 1129,   72,   72,   34, 1112, 1110,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5810, 1120, 5810,  111,  137,  222, 1095, 5810,    0, 1089,
     1088, 5810,    0,  457, 1069,  476, 5810,    0,  502, 5810,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  462,

      593,  599,  596,  629,  630,  581,  612,  614,  636,  613,
      643,  627,  641,  645,  648, 5810,    0,  706, 1068,  725,
     1067,  751,    0,  796,  770,  839,  649,  650,  828,  832,
      666,  831,  837,  698,  835,  855,  704,  836,  838,  856,
      875,  887,  886,  888,  873,  756,  876,  896,  903,  891,
      906,  908,  923,  925,  924,  920,  961,  928,  921,  948,
      940,  952,  953,  958,  964,  977,  960,  988,  975,  989,
      981,  994,  993, 1010,  999, 1011, 1022, 1012, 1033, 1023,
      738, 1091,  814, 1065, 1063, 1062, 1138, 1110,  823, 1183,
     1226, 1157, 1269, 1010, 1204, 1024, 1027, 1091, 1205, 1044,

     1257, 1143, 1267, 1256, 1032, 1260, 1261, 1274, 1125, 1266,
     1306, 1298, 1270, 1307, 1187, 1302, 1304, 1309, 1347, 1310,
     1318, 1299, 1069, 1343, 1322, 1351, 1358, 1353, 1356, 1342,
     1386, 1378, 1372, 1381, 1389, 1399, 1395, 1408, 1419, 1410,
     1413, 1423, 1433, 1427, 1403, 1446, 1447, 1437, 1435, 1203,
     1056, 1018,  995,  984, 1505, 1516, 1559, 1535, 1578, 1604,
     1623, 1649, 1668,  960, 1441, 1651, 1444, 1438, 1662, 1546,
     1591, 1670, 1648, 1661, 1668, 1665, 1666, 1702, 1683, 1458,
     1698, 1703, 1716, 1711, 1712, 1719, 1713, 1714, 1722, 1723,
     1735, 1718, 1602, 1733, 1753, 1753, 1766, 1768, 1763, 1774,

     1764, 1771, 1758, 1767, 1803, 1786, 1469, 1788, 1538, 1802,
     1705, 1805, 1820, 1815, 1809, 1810, 1837, 1808, 1818, 1853,
     1826, 1855,  937,  906,  905,  902, 1898, 1915, 1934, 1960,
     1979, 1544, 2005,  899, 2017, 2060, 2036, 1894, 1959, 1824,
     2038, 2051, 2062, 2063, 2052, 2057, 2133, 2060, 1854, 2092,
     1947, 2058, 1840, 2082, 2104, 2110, 2115, 2116, 2120, 2123,
     2122, 2134, 2126, 2138, 2132, 2156, 2137, 2161, 1863, 1892,
     2162, 2168, 2169, 2059, 2173, 2186, 2176, 2206, 2109, 2196,
     2208, 2209, 2159, 2213, 2210, 2217, 2189, 2223, 2220, 2225,
     2241, 2230, 2248, 2238,  892,  865,  852, 2306, 2317,  851,

     2329, 2372, 2348, 2391, 2417, 2428, 2447, 2473, 2492, 2494,
     2473, 2350, 2224, 2475, 2472, 2507, 2271, 2509, 2241, 2518,
     2476, 2308, 2512, 2359, 2529, 2504, 2537, 2534, 2523, 2559,
     2541, 2556, 2546, 2568, 2564, 2573, 2577, 2586, 2589, 2579,
     2580, 2378, 2410, 2591, 2592, 2607, 2611, 2614, 2415, 2627,
     2632, 2604, 2641, 2638, 2645, 2621, 2631, 2569, 2656, 2650,
     2426, 2672, 2661, 2665,  823,  777,  776,  775, 2730, 2741,
     2752, 2771, 2797, 2816, 2780, 2842,  774, 2854, 2897, 2873,
     2875, 2670, 2883, 2796, 2893, 2886, 2911, 2900, 2668, 2889,
     2888, 2699, 2899, 2918, 2938, 2928, 2939, 2940, 2935, 2942,

     2946, 2941, 2945, 2974, 2947, 2970, 2739, 2978, 2784, 2980,
     2984, 2963, 2979, 2981, 2987, 2982, 3006, 2989, 3009, 3014,
     3015, 2991, 3031, 3026, 3020, 3036, 3029, 3039, 3049, 3034,
     3043, 3061, 3051, 3038, 3066, 3082, 3073, 3054,  773,  772,
      770, 3140, 3151,  740, 3163, 3206, 3182, 3191, 3251, 3225,
     3296, 3270, 3204, 3079, 3081, 3193, 3287, 3291, 3284, 3078,
     3311, 3312, 3288, 3081, 3318, 3290, 3327, 3329, 3331, 3335,
     3333, 3348, 3339, 3343, 3334, 3356, 3364, 3358, 3379, 3372,
     3238, 3347, 3375, 3383, 3378, 3380, 3386, 3375, 3394, 3407,
     3415, 3395, 3400, 3392, 3423, 3402, 3408, 3410, 3419, 3438,

     3440,  732,  731,  730,  729, 3482, 3500, 3519, 3545, 3564,
     3590,  728, 3602, 3645, 3621, 3437, 3631, 3639, 3636, 3640,
     3623, 3544, 3641, 3646, 3439, 3678, 3496, 3647, 3637, 3676,
     3688, 3487, 3692, 3691, 3689, 3498, 3699, 3706, 3681, 3693,
     3722, 3694, 3683, 3694, 3700, 3698, 3711, 3721, 3738, 3727,
     3739, 3740, 3745, 3731, 3733, 3735, 3762,  727,  692,  687,
     3805,  686, 3822, 3865, 3841, 3910, 3884, 3955, 3929, 3950,
     3741, 3947, 3743, 3844, 3949, 3897, 3758, 3801, 3959, 3832,
     3946, 3954, 3957, 3958, 3956, 3948, 3953, 3993, 3996, 4005,
     4006, 4008, 4009, 5810, 5810, 4004, 4007, 3998, 4001, 4011,

     4000,  685,  683,  680,  673, 4071, 4090, 4116, 4135, 4161,
      672, 4173, 4216, 4192, 4206, 4203, 4002, 4003, 4194, 4211,
     4115, 4013, 4050, 4230, 4210, 4217, 4058, 4246, 4103, 4209,
     4258, 4239, 4263, 4249, 4266, 4257, 4248, 4252, 4261,  671,
      571,  570, 4324,  562, 4336, 4379, 4355, 4424, 4398, 4469,
     4443, 4254, 4262, 4259, 4458, 4459,  570, 4377, 4456, 4260,
     4465, 4473, 4464, 4468, 4315, 4469, 4471, 4488, 4502, 4509,
      557,  556,  528,  525, 4569, 4588, 4614, 4633, 4659,  524,
     4671, 4714, 4690, 4522, 4501, 4503, 4692, 4711, 4703, 4728,
     4366, 4613, 4730, 4731, 4508, 4744, 4708, 4358, 4411,  523,

      522,  521,    0, 4802,  520, 4814, 4857, 4833, 4902, 4876,
     4947, 4921, 4716, 4915, 4601, 4504, 4520, 4561, 4949, 4844,
     4717, 4674, 4793, 4936, 4711, 4952, 4945, 4950,  519,  518,
      516,  515,  514, 5012, 5031, 5057, 5076, 5102,  513, 5114,
        0, 5133, 4939, 4944, 5134, 4856, 4871, 4942, 5056, 5117,
     4946, 5141, 5035, 5044, 5113, 5132, 5135, 4999,  512,  511,
     5810,  483,    0, 5199,  482, 5211, 5230, 5256, 5275,    0,
     4947, 5153, 5253, 5138, 5272, 4950, 4969, 5130, 5273, 5190,
     5268, 5283, 5287, 5129, 5274, 5131, 5275,  481,  480,  479,
      478, 5347, 5366, 5392,  465,    0, 5276, 5326, 5345, 5289,

     5278, 5191,    0, 5349, 5419, 5198, 5277, 5325, 5346, 5360,
     5378,  446,  445,  434,    0, 5436, 5810,    0, 5388, 5415,
     5419, 5423, 5416,    0, 5408, 5472, 5438,  433,  431,  430,
     5810, 5444, 5420, 5457, 5459, 5471, 5421, 5450, 5477, 5476,
     5473,  428,  424,  406,    0, 5463, 5474, 5490, 5467, 5491,
     5479, 5476, 5810, 5511, 5512, 5496, 5504,  395,  356,  355,
     5506, 5514, 5518, 5509, 5514, 5810, 5539, 5524, 5520, 5547,
      353,  352,  350,    0, 5536, 5526, 5528, 5562, 5810, 5563,
     5548,  346,  325,  307, 5558, 5557, 5810, 5559,    0,  305,
      276,    0, 5560,  267,  262,  260,  258,  254,  251,    0,

      229,  214, 5810, 5633, 5637, 5641, 5645, 5649, 5653, 5655,
      232, 5657, 5659, 5661, 5663, 5665, 5667, 5669, 5671, 5673,
     5675, 5679, 5681, 5683, 5685, 5687, 5689, 5691, 5693, 5695,
     5697, 5699, 5701, 5703, 5705, 5707, 5709, 5711, 5713, 5715,
     5717, 5719, 5721, 5723, 5725, 5727, 5729, 5731,  231, 5733,
     5735, 5737,  230, 5739, 5741, 5743,  228,  226, 5745, 5747,
     5749,  224, 5753, 5757, 5759, 5761,  219,  217, 5765, 5769,
     5771, 5773, 5775, 5777, 5779,  214, 5781, 5783, 5785, 5787,
     5789,  145, 5791, 5793, 5795,  131, 5797,  117, 5799, 5801,
     5803,   80, 5805

    } ;

static yyconst flex_int16_t yy_def[1094] =
    {   0,
     1003,    1, 1004, 1004, 1005, 1005, 1003, 1003, 1003, 1003,
     1003, 1006, 1007, 1008, 1003, 1003,   16, 1003, 1003, 1003,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1003, 1003, 1003, 1003, 1003, 1003, 1006, 1003, 1007, 1008,
     1003, 1003, 1009, 1003, 1010,   54, 1003, 1011, 1003, 1003,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1003, 1009, 1003, 1012,  118,
     1013, 1003, 1011, 1003,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1003,  182, 1014, 1015, 1016, 1003,  187, 1003, 1003,
     1003,  190,  126,  193,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1003,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  183,
      183, 1015, 1017, 1018, 1003, 1003, 1003,  256, 1003, 1003,
      260, 1003,  262,  193,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1003,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1019, 1003, 1020, 1021, 1003, 1003,  328, 1003,
      330, 1003, 1003, 1003, 1003, 1003,  335,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1022,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1003, 1003,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1023, 1024, 1025, 1003, 1003, 1003,

     1003, 1003,  401, 1003, 1003, 1003,  406, 1003,  408,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1003,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1003, 1003,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1020, 1003, 1026, 1027, 1003, 1003,
     1003,  471, 1003,  473, 1003, 1003, 1003, 1003, 1003,  478,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1003,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1003, 1003,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1028, 1029,
     1030, 1003, 1003, 1003, 1003, 1003,  545, 1003, 1003,  549,
     1003,  551,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1003,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1003, 1003,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1031, 1003, 1032, 1033, 1003, 1003,  607, 1003,  609,
     1003, 1003, 1003, 1003,  613,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1003,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1003, 1003,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1034, 1035, 1036,
     1003, 1003, 1003, 1003,  663, 1003,  666, 1003,  668,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1003,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1003, 1003,   26,   26,   26,   26,   26,

       26, 1037, 1003, 1038, 1039, 1003,  706, 1003,  708, 1003,
     1003, 1003, 1003,  712,   26,   26,   26,   26,   26,   26,
       26, 1003,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1040,
     1041, 1042, 1003, 1003, 1003, 1003,  745, 1003,  748, 1003,
      750,   26,   26,   26,   26,   26, 1003,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1043, 1003, 1044, 1045, 1003,  775, 1003,  777, 1003, 1003,
     1003, 1003,  781,   26,   26,   26,   26, 1003,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1046,

     1047, 1048, 1049, 1003, 1003, 1003, 1003,  806, 1003,  809,
     1003,  811,   26,   26,   26,   26, 1003, 1003,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1050, 1003,
     1051, 1003, 1052, 1003,  834, 1003,  836, 1003, 1003, 1003,
     1053,  840,   26,   26,   26, 1003, 1003,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1054, 1055,
     1003, 1056, 1057, 1003, 1003, 1003,  866, 1003,  868, 1058,
       26,   26,   26,   26,   26, 1003, 1003,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1059, 1003, 1060,
     1061, 1003,  892, 1003, 1003, 1062,   26,   26,   26,   26,

       26, 1003, 1063,   26, 1064,   26,   26,   26,   26,   26,
       26, 1065, 1003, 1066, 1067, 1003, 1003, 1068,   26,   26,
       26,   26,   26, 1069, 1003, 1070,   26, 1071, 1072, 1073,
     1003,   26,   26,   26,   26, 1003, 1003, 1003,   26,   26,
       26, 1074, 1003, 1075, 1076,   26,   26,   26,   26, 1003,
     1003, 1003, 1003,   26,   26,   26,   26, 1077, 1078, 1079,
       26,   26,   26,   26, 1003, 1003, 1003,   26,   26,   26,
     1080, 1003, 1081, 1082,   26,   26,   26, 1003, 1003,   26,
       26, 1083, 1084, 1085,   26,   26, 1003,   26, 1086, 1003,
     1087, 1088,   26, 1003, 1089, 1090, 1083, 1003, 1091, 1092,

     1093, 1003,    0, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003

    } ;

static yyconst flex_int16_t yy_nxt[5886] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1003,   61,  837,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1003,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58,  996,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61,  994,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  984,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  960,  114,   61,  931,
       61,  930,   61,   61,   44,   45,  918,  129,  896,   70,
      891,   81,  870,  833,  123, 1000,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1000,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1000,   82,   61,  992,   61,   61,   61, 1003,
       86, 1000,   71,  992,   62,   62,   87,   62,  997,  132,
       61,  130,   61,   72,   89,   61,   73,  992,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  974,   95,  992,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  974,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1003,
      145,   61,   61,   61,   61,   61,   61,  861,   61,   61,
      143,  974,   61,  945,  982,   61,  974,  945,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  832,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  945,  102,  103,
      109,   61,   61,  144,  154,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  915,   61,  147,  108,  803,
      142,  945,  915,   61,  942,  915,  109,   61,   61,  144,
      154,   61,  146,   61,   61,  110,  863,  774,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  841,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  915,

      863,  832,  122,  807,  863,  167,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  167,  832,  888,  782,  863,  861,  832,   61,  774,
      705,  746,  832,  774,  122,  713,  803,  160,  157,  774,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  157,   66,   61,  705,  800,  788,
      158,   61,  135,  664,  149,   61,  153,   61,   61,  150,
      136,  774,  705,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  155,  158,   61,  135,  162,
      149,   61,  153,   61,   61,  150,  136,   61,  159,   61,
      156,  161,  169,  174,   61,   61,   61,   61,   61,  151,
       61,  155,  163,  168,  170,  162,   61,   61,  164,   61,
      165,  166,   61,   61,  159,   61,  156,  161,  169,   61,
       61,   61,  171,   61,  173,   61,  176,   61,  163,  168,
      170,  178,   61,   61,  164,   61,  165,  166,   61,  172,
       61,  175,   61,   61,  177,   61,  194,  179,  171,   61,
      173,   61,  176,   61,   61,  180,   61,  178,   61,  181,
      195,   61,  605,  614,  122,  172,   61,  175,   61,   61,

      177,  705,  194,  179,  605,   61,  122,  546,  705,   61,
       61,  180,   61,  605,   61,  181,  195,   61,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   55,  200,  183,
      183,  183,  183,  183,  183,   61,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  203,   61,  702,  479,
      122,  605,  468,  468,  200,  183,  183,  183,  183,  183,
      183,  402,   57,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  203,   61,  188,  188,  188,  188,  188,  188,
     1003,   61,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  605,  212,  468,  122,  336,  122,  468,  326,   61,

      188,  188,  188,  188,  188,  188,  189,   61,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  212,  192,
      192,  192,  192,  192,  192,   61,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  539,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       55,  198,  193,  193,  193,  193,  193,  193,  196,  197,
      199,   61,  257,  468,   61,   61,  201,  204,   61,   61,
       61,   61,  202,  206,  207,  205,  326,  198,  193,  193,
      193,  193,  193,  193,  196,  197,  199,   61,   61,   61,

       61,   61,  201,  204,   61,   61,   61,   61,  202,  206,
      208,  205,  209,  326,  211,  210,   61,  213,   61,   61,
      191,  214,  216,  122,   61,   61,  326,  186,  215,   61,
       61,   61,  219,  217,   61,  218,  208,  225,  209,   61,
      211,  210,   61,  213,   61,   61,   61,  214,  216,   61,
      220,   61,  226,  221,  215,   61,   61,   61,  122,  217,
       61,  218,  222,   61,   61,   61,   61,   61,   61,  223,
      224,   61,   61,  227,  230,   61,  220,   61,  226,  221,
      231, 1003,  228,   61,  232,  233,  229,  234,  222,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  239,  227,

      230,   61,  236,   61,   61,  326,  231,   61,  228,   61,
      232,  233,  229,  234,  235,  238,  186,   61,   61,  237,
       61,   61,   61,  240,   61,  241,  244,   61,  236,   61,
       61,   61,   61,   61,  242,  243,   61,   61,  245,  323,
      235,  238,   61,  247,   61,  237,   61,  246,  265,  240,
       61,  241,  244,   61,   61,   61,  249,   61,   61,  248,
      242,  243,   61,   61,  245,   61,   61,   61,   61,  247,
       61,  271,  268,  246,  265,   61,   61, 1003,  295,   61,
       61,   61,  249,  122,  186,  248,  186,   61,  186,  122,
      122,   61,   61,   61,   50,   51,   61,  271,  268,   48,

      269,   61,   61,  250,  250,  250,  250,  250,  250,  250,
      250,  250,   55,   61,  251,  251,  251,  251,  251,  251,
     1003,   57,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  116,   60,   59,   61,   51,   48, 1003,   42,   42,
      251,  251,  251,  251,  251,  251, 1003,   57,  255, 1003,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  257,
       61,  258,  258,  258,  258,  258,  258, 1003,   61,  261,
      261,  261,  261,  261,  261,  261,  261,  261, 1003,  273,
     1003, 1003, 1003, 1003, 1003, 1003,   61,  258,  258,  258,
      258,  258,  258,  189,   61,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  191,  273,  261,  261,  261,  261,
      261,  261,   61,  266,  270,  250,  250,  250,  250,  250,
      250,  250,  250,  250, 1003, 1003, 1003, 1003, 1003,  284,
       61,  267,  261,  261,  261,  261,  261,  261,  262,  262,
      262,  262,  262,  262,  262,  262,  262,   61,   61,  263,
      263,  263,  263,  263,  263,  284,   61,  267, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  275, 1003, 1003, 1003, 1003,
     1003, 1003, 1003,   61,   61,  263,  263,  263,  263,  263,
      263,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      274, 1003,  264,  264,  264,  264,  264,  264,  272,   61,

       61,  276,  277,   61,   61,  278,  279,  281,  294,   61,
       61,  282, 1003,   61, 1003, 1003,  274,   61,  264,  264,
      264,  264,  264,  264,  272,   61,   61,  276,  277,   61,
       61,  278,  279,  280,  283,   61,   61,  282,  285,   61,
      292,   61,   61,   61,  286,   61, 1003,   61,  293,   61,
       61,  287,   61,   61, 1003, 1003, 1003, 1003, 1003,  280,
      283,   61, 1003,  298,  285,   61,  292,   61,   61,  296,
      286,   61,  288,   61,  293,   61,   61,  287,   61,   61,
      301,  289,  290,  291,  297,   61,   61,   61,  299,  298,
       61,   61,  300,  302,   61,  296,   61,  306,  288,   61,

     1003,   61, 1003, 1003,  305, 1003,  301,  289,  290,  291,
      297,   61,   61,  303,  299,   61,   61,  304,  300,  302,
       61,   61,   61,  306,   61,   61,  309,   61,  307,   61,
      305,  308,   61,  310, 1003,  311,  318,  314,   61,  303,
     1003,   61,   61,  304,  322,  312,   61,   61, 1003,  315,
       61,   61,  309,   61,  307,   61,   61,  308,   61,  310,
      313,  311,   61,  314,   61,  316,   61,  317,   61,  319,
       61,  312,   61,  320,  321,  315,   61,   61,   61,   61,
       61,   61,   61,  338,   61,  340,  313,   61,   61,   61,
       61,  316,   61,  317, 1003,  319,   61, 1003, 1003,  320,

      321,   61,   61, 1003,   61, 1003,   61,   61, 1003,  338,
       61,  340,   61,   61, 1003,   61,   61,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  255,   61,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  257,   61,  329,
      329,  329,  329,  329,  329, 1003, 1003,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  329,  329,  329,  329,  329,
      329,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      344,   61,  331,  331,  331,  331,  331,  331,  332,   61,
      259,  259,  259,  259,  259,  259,  259,  259,  259, 1003,

      345, 1003, 1003, 1003, 1003, 1003,  344,   61,  331,  331,
      331,  331,  331,  331,  189,   61,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  191,  367,  334,  334,  334,
      334,  334,  334, 1003,   61,  334,  334,  334,  334,  334,
      334,  334,  334,  334, 1003,   61, 1003, 1003, 1003, 1003,
     1003, 1003,  367,  334,  334,  334,  334,  334,  334,  189,
       61,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      336,   61,  337,  337,  337,  337,  337,  337, 1003,  346,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  339,
      347,   61,  348,  352,   61,  341,  342,  343,  337,  337,

      337,  337,  337,  337,   61,   61,  349,  351,   61,   61,
      350,   61,  356,   61,  354,  339,  347,   61,  348,  352,
       61,  341,  342,  343,  355,  357,   61,  366, 1003, 1003,
       61,   61,  349,  351,   61,   61,  350,   61,  353,   61,
      354,   61,  358,  359,  361,   61,   61,  360,   61,  363,
      355,  362,   61, 1003,   61,   61,   61,   61,  365,   61,
      364,   61,   61,  368,  353,   61,   61,   61,  358,  359,
      361,   61,   61,  360,   61,  363,   61,  362,   61,  369,
       61,   61,   61,   61,  365,   61,  364,   61,   61,  368,
      371,   61,   61,  372,  370,  373,   61,  375,  378,  374,

      376,   61,   61, 1003,   61,  369,   61,   61,  377,   61,
       61,   61,  380,  379,   61,  382,  371,   61, 1003,  372,
      370,  373,   61,  375,  378,  374,  376,   61,  381,   61,
     1003,   61,   61,   61,  377,   61,   61,   61,  387,  379,
       61,  382,  384,   61,  383,   61,   61,  385,   61,  386,
      388,   61,   61,   61,  381,   61,  390,   61,   61,  391,
      389,   61,  392,   61,  387,  412,  393,   61,  384,   61,
      383,   61,   61,  385,   61,  386,  388,   61,   61,   61,
       61,  394,  390,   61,   61,  391,  389,   61, 1003,   61,
     1003,  412,  393,   61,  423,   61,   61,   61,   61, 1003,

      442, 1003, 1003,  410, 1003, 1003,   61,  394,  398,   61,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  443,
      423, 1003,   61,   61,   61,  255,  442,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  257,   61,  400,  400,
      400,  400,  400,  400, 1003,  443,  400,  400,  400,  400,
      400,  400,  400,  400,  400, 1003,  425, 1003, 1003, 1003,
     1003, 1003, 1003,   61,  400,  400,  400,  400,  400,  400,
      255, 1003,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  402,  411,  403,  403,  403,  403,  403,  403, 1003,
       61,  403,  403,  403,  403,  403,  403,  403,  403,  403,

     1003, 1003,   61, 1003, 1003, 1003, 1003, 1003,  411,  403,
      403,  403,  403,  403,  403,  189,   61,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  191,  189,   61,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  336, 1003,
      407,  407,  407,  407,  407,  407, 1003, 1003,  407,  407,
      407,  407,  407,  407,  407,  407,  407, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  413,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,   61,  414,  409,  409,  409,  409,  409,  409,  415,
      416,  413,  418,  417,   61,   61,  422, 1003,  426, 1003,

       61,   61,   61,   61, 1003,   61,   61,   61,  414,  409,
      409,  409,  409,  409,  409,  415,  416,  427,  418,  417,
       61,   61,  422,  424,  426,   61,   61,   61,   61,   61,
      428,   61,   61,  419,  419,   61,  419,  419,  419,  419,
      419,  419,  420,  427,  419,  429,  433,   61, 1003,  424,
      430,   61,   61,   61,  419,  419,  428,  434,   61,   61,
      431,   61,  432,   61,  437,   61,   61,  438,  435,   61,
      436,  429,  433,   61,  440,   61,  430,   61,   61,   61,
       61,   61, 1003,  434,   61,   61,  431,  439,  432,   61,
      437,   61,   61,  438,  435,   61,  436,  444,  441,   61,

      440,   61,   61,   61,   61,   61,   61,   61,  445,  446,
      449,   61,   61,  439,  447,  448,   61,  453,  454,   61,
     1003,  452, 1003,  444,  441,   61, 1003, 1003,   61,   61,
       61,   61,   61,  450,  445,  446,  449,   61,   61,   61,
      447,  448,   61, 1003,  457,   61,  451,  452,  455,   61,
      456,   61,   61,   61,  458,   61,   61,  463,   61,  450,
       61,  459,  460,   61,  462,   61,   61,   61,   61,  464,
      457,  486,  451,   61,  455,   61,  456,   61,   61,   61,
      458,   61,   61,  461,   61,  492,   61,  459,  460,   61,
      462,   61,   61,   61,   61,  464, 1003,  486, 1003,   61,

     1003, 1003,  490, 1003, 1003, 1003, 1003,   61, 1003,  461,
       61,  492, 1003, 1003,   61, 1003, 1003,   61,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  255,  490,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  257,  255,
       61,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      402,   61,  472,  472,  472,  472,  472,  472, 1003,  485,
      472,  472,  472,  472,  472,  472,  472,  472,  472, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003,   61,  472,  472,
      472,  472,  472,  472,  473,  473,  473,  473,  473,  473,
      473,  473,  473,   61,  497,  474,  474,  474,  474,  474,

      474,  475,   61,  404,  404,  404,  404,  404,  404,  404,
      404,  404, 1003,  517, 1003, 1003, 1003, 1003, 1003,   61,
      497,  474,  474,  474,  474,  474,  474,  189,   61,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  189,  517,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  336,
      518,  477,  477,  477,  477,  477,  477, 1003,   61,  477,
      477,  477,  477,  477,  477,  477,  477,  477, 1003,   61,
     1003, 1003, 1003, 1003, 1003, 1003,  518,  477,  477,  477,
      477,  477,  477,  189,   61,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  479,   61,  480,  480,  480,  480,

      480,  480, 1003,  487,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  484,  488,   61,   61, 1003,   61,   61,
      495, 1003,  480,  480,  480,  480,  480,  480,  481,  487,
      489,  482,  491, 1003, 1003, 1003, 1003,  483, 1003,  484,
      488,   61,   61,  493,   61,   61,  495,   61,  501,  496,
       61, 1003,   61,  494,  481,   61,  489,  482,  491,  498,
      504,   61,  495,  483,  502,  499,   61,  500,  506,  493,
      503,  508,   61,   61,  501,  496,   61,   61,   61,  494,
       61,   61,  505,  507,   61,  498,  504,   61,  495,   61,
      502,  499,   61,  500,  506,  509,  503,  508,   61,   61,

      511,  510,   61,   61,  512,  533,   61,   61,  505,  507,
       61,   61,   61,  513,  519,   61,   61,  514,  516,  515,
       61,  509,   61,   61, 1003,   61,  511,  510,   61,   61,
      512,  533,   61,   61,   61,   61,  520,   61,   61,  513,
      519,  527,   61,  514,  516,  515,   61,   61,   61,   61,
       61,  521,  522,  524,   61,   61,  523,   61,   61,  526,
       61,   61,  520,  525,   61,  531,  528,  527,  530,  529,
       61, 1003,  532,   61,   61,   61,   61,  521,  522,  524,
       61,   61,  523,   61,   61,  526,  535, 1003,   61,  525,
       61,  531,  528,   61,  530,  529,   61,  534,  532,   61,

       61,   61,  537,  536,   61,  538,  554,   61,   61,  561,
       61,   61,  535,   61,   61,   61, 1003, 1003, 1003,   61,
     1003, 1003, 1003,  534, 1003,   61,  564, 1003,  537,  536,
       61,  538,  554, 1003,   61,  561, 1003,   61, 1003,   61,
      542,   61,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  255,  564,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  255, 1003,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  402, 1003,  544,  544,  544,  544,  544,
      544, 1003,   61,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  544,  544,  544,  544,  544,  544,  255,   61,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  546,  556,
      547,  547,  547,  547,  547,  547, 1003,   61,  547,  547,
      547,  547,  547,  547,  547,  547,  547, 1003, 1003,   61,
     1003, 1003, 1003, 1003, 1003,  556,  547,  547,  547,  547,
      547,  547,  189,   61,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  336,  189,   61,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  479, 1003,  550,  550,  550,
      550,  550,  550, 1003, 1003,  550,  550,  550,  550,  550,
      550,  550,  550,  550, 1003,  558, 1003, 1003, 1003, 1003,

     1003, 1003,  553,  550,  550,  550,  550,  550,  550,  551,
      551,  551,  551,  551,  551,  551,  551,  551,   61,  555,
      552,  552,  552,  552,  552,  552,   61,  557,  553,   61,
      560,   61,   61,  565,  563, 1003,   61,  562,  559, 1003,
     1003,  566,   61,   61,   61,  555,  552,  552,  552,  552,
      552,  552,   61,  557,   61,   61,  560,   61,   61,  565,
      563,   61,   61,  562,  559,  567,  569,  566,   61,   61,
      568,   61,  571,  573, 1003,  570,  572,  574,   61,  578,
       61,   61,   61,   61,   61,   61,  575,   61,   61,   61,
       61,  567,  569,  577, 1003, 1003,  568,   61,  571,  573,

      576,  570,  572,  574,   61,  579,   61,   61,   61,   61,
       61,   61,  575,   61,   61,   61,   61,   61,  581,  577,
      580,   61,   61,   61,   61,   61,  576,   61,  582,  583,
       61,  579,   61,  584,   61,  589, 1003, 1003, 1003,   61,
      585,  586,  587,   61,  581,  590,  580,   61,   61,   61,
       61,   61,   61,   61,  582,  583,   61,   61,   61,  584,
       61,  588,  591,   61,  592,  595,  585,  586,  587,   61,
      596,  590,   61,  593,   61,  594, 1003,   61,   61,   61,
      598,   61,   61,   61,   61, 1003,   61,  588,  591,   61,
      592,  595,   61,  599,   61,   61,  596,   61,   61,  593,

       61,  594,  597,   61,   61,   61,  598,   61,   61,   61,
      600,  601,   61,  617,  618,  623,   61,  627,   61,  599,
       61,   61,   61,   61,   61,   61, 1003, 1003,  597, 1003,
       61, 1003, 1003, 1003, 1003,   61,  600,  601, 1003,  617,
      618,  623,   61,  627, 1003, 1003, 1003,   61,   61, 1003,
       61,   61,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  255, 1003,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  402,  255, 1003,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  546, 1003,  608,  608,  608,  608,
      608,  608, 1003, 1003,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  608,  608,  608,  608,  608,  608,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  616,  619,  610,
      610,  610,  610,  610,  610, 1003,   61,  612,  612,  612,
      612,  612,  612,  612,  612,  612, 1003,   61, 1003, 1003,
     1003, 1003, 1003,  616,  619,  610,  610,  610,  610,  610,
      610,  189,   61,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  479,   61,  612,  612,  612,  612,  612,  612,
     1003,   61,  615,  615,  615,  615,  615,  615,  615,  615,
      615, 1003, 1003, 1003, 1003, 1003, 1003,  626, 1003, 1003,

      612,  612,  612,  612,  612,  612,  189,   61,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  614,  620,  615,
      615,  615,  615,  615,  615,  621,  622,   61, 1003, 1003,
       61,   61, 1003,   61,   61, 1003,  629, 1003,  624,  625,
     1003,  628, 1003,  638,  620,  615,  615,  615,  615,  615,
      615,  621,  622,   61,   61,   61,   61,   61,  633,   61,
       61,   61,  629,  630,  624,  625,  631,  628,  632,  634,
       61,  635,   61,  640,   61, 1003,   61,   61,   61,  636,
       61,   61,   61,  639,  633,  637,   61,   61,  642,  630,
       61,   61,  631,  641,  632,  634,   61,  635,   61,   61,

       61,   61,   61,   61,   61,  636,  644,   61,   61,  639,
      645,  637,   61,  643,  646,   61,   61,   61,   61,  641,
      647,   61,   61,   61,  651,   61,  648,   61,  649,   61,
      652,  653,  644,   61,  650,   61,  645,   61,   61,  643,
      646,   61,  655,   61,   61,   61,  647,   61,   61,   61,
       61,   61,  648,   61,  649,   61,  652,  653,   61,  654,
      650,   61,   61,   61,   61,  656,   61,  657,  655,   61,
     1003,   61, 1003, 1003, 1003, 1003,   61,   61,  670,   61,
       61,   61,   61,   61,   61,  654, 1003, 1003,   61, 1003,
     1003,  656,   61,  657,  606,  606,  606,  606,  606,  606,

      606,  606,  606, 1003,  670, 1003,   61,   61,   61,   61,
      255, 1003,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  546,  680,  662,  662,  662,  662,  662,  662, 1003,
      685,  662,  662,  662,  662,  662,  662,  662,  662,  662,
     1003,   61, 1003, 1003, 1003, 1003, 1003, 1003,  680,  662,
      662,  662,  662,  662,  662,  255,  685,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  664,   61,  665,  665,
      665,  665,  665,  665, 1003,  676,  665,  665,  665,  665,
      665,  665,  665,  665,  665, 1003, 1003,   61, 1003, 1003,
     1003, 1003, 1003, 1003,  665,  665,  665,  665,  665,  665,

      189,  676,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  479,  189,   61,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  614, 1003,  667,  667,  667,  667,  667,
      667, 1003, 1003,  667,  667,  667,  667,  667,  667,  667,
      667,  667, 1003, 1003, 1003, 1003,  682, 1003, 1003, 1003,
      675,  667,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  668,  668,  668,  668,  668,   61,  677,  669,  669,
      669,  669,  669,  669,   61,  672,  675,  673,  671,   61,
       61,  674,   61,   61,   61,  678, 1003, 1003,  681,   61,
       61, 1003,   61,  677,  669,  669,  669,  669,  669,  669,

       61,  672,  683,  673,  671,   61,   61,  674,   61,   61,
       61,  678,  679,  684,  681,   61,   61,  686,  687,   61,
      688,   61,  689, 1003,   61,  693,   61,  691,  683,  690,
      694,   61,   61, 1003,   61,   61,   61,   61,  679,  684,
      695,   61,   61,  686,  687,   61,  688,   61,  689,   61,
       61,  693,   61,  691,   61,  690,  694,   61,   61,  692,
       61,   61,   61,   61,   61,   61,  695,   61,   61,  696,
       61,  698,  699,  697,   61,   61,   61,  700,   61, 1003,
       61,   61,   61,   61,   61,  692,   61,  701,   61, 1003,
       61,   61, 1003, 1003, 1003,  696,   61,  698,  699,  697,

       61,   61,   61,  700,   61,   61, 1003,   61,   61,   61,
       61, 1003,   61,  701,   61,  255, 1003,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  546,   61, 1003, 1003,
     1003,   61,  255, 1003,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  664,  720,  707,  707,  707,  707,  707,
      707, 1003, 1003,  707,  707,  707,  707,  707,  707,  707,
      707,  707, 1003, 1003, 1003, 1003, 1003, 1003, 1003,  722,
      720,  707,  707,  707,  707,  707,  707,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  717,   61,  709,  709,
      709,  709,  709,  709, 1003,  722,  711,  711,  711,  711,

      711,  711,  711,  711,  711, 1003, 1003, 1003, 1003, 1003,
     1003, 1003,  717,   61,  709,  709,  709,  709,  709,  709,
      189, 1003,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  614,  719,  711,  711,  711,  711,  711,  711, 1003,
       61,  714,  714,  714,  714,  714,  714,  714,  714,  714,
     1003, 1003, 1003, 1003, 1003, 1003, 1003,  728,  719,  711,
      711,  711,  711,  711,  711,  189,   61,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  713,  715,  714,  714,
      714,  714,  714,  714,  716,  718,  721,  723,  724,   61,
       61,   61,   61,   61,  725,  726,   61,   61,  727,   61,

       61,   61,   61,  715,  714,  714,  714,  714,  714,  714,
      716,  718,  721,  723,  724,   61,   61,   61,   61,   61,
      725,  726,   61,   61,  727,   61,   61,   61,   61,  729,
      730,  731,  735,  732,  733,  734,   61,  738,  736,   61,
      737,   61,  739,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  757,   61,  729,  730,  731,  735,  732,
      733,  734,   61,  738,  736,   61,  737,   61,  739,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  757,
       61,  255, 1003,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  664,   61,  744,  744,  744,  744,  744,  744,

     1003,   61,  744,  744,  744,  744,  744,  744,  744,  744,
      744, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,   61,
      744,  744,  744,  744,  744,  744,  255,   61,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  756,  747,
      747,  747,  747,  747,  747, 1003,   61,  747,  747,  747,
      747,  747,  747,  747,  747,  747, 1003, 1003,   61, 1003,
     1003, 1003, 1003, 1003,  756,  747,  747,  747,  747,  747,
      747,  189,   61,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  614,  189,   61,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  713, 1003,  749,  749,  749,  749,

      749,  749, 1003, 1003,  749,  749,  749,  749,  749,  749,
      749,  749,  749, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003,  754,  749,  749,  749,  749,  749,  749,  750,  750,
      750,  750,  750,  750,  750,  750,  750,   61,  755,  751,
      751,  751,  751,  751,  751,  752,   61,  754,  753,   61,
      759,  760,   61,   61,   61, 1003, 1003,  758,  766, 1003,
       61, 1003,  764,   61,  755,  751,  751,  751,  751,  751,
      751,  752,   61,   61,  753,   61,  759,  760,   61,   61,
       61,  761,   61,  758,  763,  768,   61,  762,  764,   61,
      765,   61,   61,  767,  769,   61,  770,  784,  785,   61,

       61,   61,   61,   61,   61,   61,   61,  761,   61,   61,
      763,  768, 1003,  762, 1003,   61,  765,   61,   61,  767,
      769,   61,  770,  784,  785, 1003,   61,   61,   61,   61,
       61,   61,   61, 1003,  255,   61,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  664,  255, 1003,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  746,   61,  776,
      776,  776,  776,  776,  776, 1003, 1003,  776,  776,  776,
      776,  776,  776,  776,  776,  776, 1003, 1003, 1003, 1003,
     1003, 1003, 1003,  822,   61,  776,  776,  776,  776,  776,
      776,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      789,   61,  778,  778,  778,  778,  778,  778, 1003,   61,
      780,  780,  780,  780,  780,  780,  780,  780,  780, 1003,
       61, 1003, 1003, 1003, 1003, 1003,  789,   61,  778,  778,
      778,  778,  778,  778,  189,   61,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  713,   61,  780,  780,  780,
      780,  780,  780, 1003,   61,  783,  783,  783,  783,  783,
      783,  783,  783,  783, 1003,  790, 1003, 1003, 1003, 1003,
     1003, 1003, 1003,  780,  780,  780,  780,  780,  780,  189,
       61,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      782,  791,  783,  783,  783,  783,  783,  783,  786,   61,

      787,   61,   61,  792,  793, 1003,  795,   61,   61,  794,
      814,   61,   61,  796,   61,  797,   61,  791,  783,  783,
      783,  783,  783,  783,  786,   61,  787,   61,   61,  792,
      793,   61,  795,   61,   61,  794,  799,   61,   61,  796,
       61,  797,   61,  798,   61,   61,   61,   61,  826,  813,
      815,   61,   61, 1003,  846, 1003, 1003,   61, 1003, 1003,
     1003, 1003,  799, 1003, 1003,   61, 1003, 1003, 1003,  798,
       61,   61,   61,   61,  826,  813,  815,   61,   61,  255,
      846,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      746,   61,  805,  805,  805,  805,  805,  805, 1003,  847,

      805,  805,  805,  805,  805,  805,  805,  805,  805, 1003,
      845, 1003, 1003, 1003, 1003, 1003, 1003, 1003,  805,  805,
      805,  805,  805,  805,  255,  847,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  807,  823,  808,  808,  808,
      808,  808,  808, 1003,   61,  808,  808,  808,  808,  808,
      808,  808,  808,  808, 1003, 1003,   61, 1003, 1003, 1003,
     1003, 1003,  823,  808,  808,  808,  808,  808,  808,  189,
       61,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      713,  189,   61,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  782, 1003,  810,  810,  810,  810,  810,  810,

     1003, 1003,  810,  810,  810,  810,  810,  810,  810,  810,
      810, 1003, 1003, 1003, 1003, 1003, 1003,   61, 1003,  816,
      810,  810,  810,  810,  810,  810,  811,  811,  811,  811,
      811,  811,  811,  811,  811,   61,  817,  812,  812,  812,
      812,  812,  812,   61,  819,  816,   61, 1003, 1003, 1003,
      828,   61,  818,  820,   61,  850,  843,  824,  825,   61,
       61,   61,  817,  812,  812,  812,  812,  812,  812,  821,
      819,   61,   61,   61,   61,  827,  828,   61,  818,  820,
       61,  850,  843,  824,  825,   61,   61,   61, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  821, 1003,   61, 1003,   61,

       61,  827, 1003, 1003, 1003, 1003,  851,  852,  853, 1003,
      854, 1003,  255,   61,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  746,  255, 1003,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  807,   61,  835,  835,  835,
      835,  835,  835, 1003, 1003,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003,   61,  835,  835,  835,  835,  835,  835,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  849,  876,
      837,  837,  837,  837,  837,  837, 1003,   61,  839,  839,
      839,  839,  839,  839,  839,  839,  839, 1003,  877, 1003,

     1003, 1003, 1003, 1003,  849,  876,  837,  837,  837,  837,
      837,  837,  189,   61,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  782,  877,  839,  839,  839,  839,  839,
      839, 1003, 1003,  842,  842,  842,  842,  842,  842,  842,
      842,  842, 1003,  844, 1003, 1003, 1003, 1003, 1003, 1003,
     1003,  839,  839,  839,  839,  839,  839,  189,   61,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  841,  844,
      842,  842,  842,  842,  842,  842,  848,  855,  856,   61,
      857,  858,   61,  872,   61,   61,  871,   61,   61,   61,
       61,  902,   61,   61,  903,   61,  842,  842,  842,  842,

      842,  842,  848,  855,  856,   61,  857,  858,   61,  872,
     1003,   61,  871,   61,   61,   61,   61,  902,   61,   61,
      903,   61,  255, 1003,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  807,  887,  865,  865,  865,  865,  865,
      865, 1003,   61,  865,  865,  865,  865,  865,  865,  865,
      865,  865, 1003, 1003, 1003,  882, 1003,  883, 1003, 1003,
      887,  865,  865,  865,  865,  865,  865,  255,   61,  866,
      866,  866,  866,  866,  866,  866,  866,  866,   61,  878,
      867,  867,  867,  867,  867,  867, 1003,   61,  867,  867,
      867,  867,  867,  867,  867,  867,  867, 1003, 1003,   61,

     1003, 1003, 1003, 1003,   61,  878,  867,  867,  867,  867,
      867,  867,  189,   61,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  782,  189,   61,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  841, 1003,  869,  869,  869,
      869,  869,  869, 1003,  879,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  884,  880,   61,  873,  881,  885,
       61,  899,  886,  869,  869,  869,  869,  869,  869,  874,
      879,  904,   61,   61,   61,   61,  875,   61,   61,  897,
      884,   61,   61,  873,   61,  885,   61,  899,  886, 1003,
     1003, 1003, 1003, 1003, 1003,  874,   61,  904,   61,   61,

       61,   61,  875,   61,   61,  897,  906,   61, 1003,  255,
       61,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      807,  255,   61,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  924,   61,  893,  893,  893,  893,  893,  893,
     1003,   61,  893,  893,  893,  893,  893,  893,  893,  893,
      893, 1003, 1003, 1003, 1003, 1003, 1003, 1003,  924,   61,
      893,  893,  893,  893,  893,  893,  189,   61,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  841,  898,  895,
      895,  895,  895,  895,  895, 1003,  907,  895,  895,  895,
      895,  895,  895,  895,  895,  895,   61,  900,  905,  908,

     1003,  909,  911,  901,  898,  895,  895,  895,  895,  895,
      895,   61,  919,  923,  910,   61,   61,   61,   61,   61,
       61,   61,   61,  900,  905, 1003,   61,  922,  911,  901,
       61, 1003,   61, 1003, 1003, 1003, 1003,   61,  919,  923,
      910,   61,   61,   61,   61,   61,   61,   61, 1003, 1003,
     1003,  920,   61,  922, 1003, 1003,   61,  255,   61,  916,
      916,  916,  916,  916,  916,  916,  916,  916,   61,   61,
      917,  917,  917,  917,  917,  917, 1003,  920,  917,  917,
      917,  917,  917,  917,  917,  917,  917, 1003,   61,   61,
      926,  921,   61, 1003,   61,   61,  917,  917,  917,  917,

      917,  917,  189,   61,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  841,   61,   61,  926,  921,   61,  925,
      925,   61,  925,  925,  925,  925,  925,  925,  933,   61,
      925,   61,  934, 1003,  937,  938, 1003, 1003, 1003, 1003,
      925,  925,  932,  935,  952,  947,  255,   61,  470,  470,
      470,  470,  470,  470,  470,  470,  470,   61,   61,   61,
      937,  938,   61,   61,  940,  941,   61, 1003,  932,  935,
      952,  947,  936,  936, 1003,  936,  936,  936,  936,  936,
      936,   61,  946,  936,   61,   61,  953,   61,   61,   61,
      940,  941,   61,  936,  936,  948,  949,  950,  951,  956,

       61, 1003,   61,  954,  955,  961,   61,   61,  946,  957,
      964,  962,  953,   61,  965,  966,   61,   61,  967,   61,
       61,  948,  949,  950,  951,  956,   61,  963,   61,  954,
      955,  961,   61,   61,  968,  957,  964,  962,  970,   61,
      965,  966,   61,   61,  967,   61,   61,   61,  969,   61,
      975,  977,   61,  963,   61,   61,  978,   61,  976,   61,
      968,   61,  979,   61,  970,   61,  980,   61,  986,   61,
      981,   61,  985,   61,  969,   61,  975,  977,   61,   61,
       61,   61,  978,   61,  976,  987,  988,   61,  979,   61,
       61,   61,  980,   61,  986,   61,  981,   61,  985,  993,

       61,   61,   61,   61, 1003,   61,   61, 1003, 1003, 1003,
     1003,  987,  988, 1003, 1003, 1003,   61,   61, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  993,   61,   61,   61,   61,
     1003, 1003,   61,   41,   41,   41,   41,   43,   43,   43,
       43,   47,   47,   47,   47,   49, 1003,   49,   49,   50,
       50,   50,   50,  117, 1003,  117,  117,  121,  121,  184,
      184,  185,  185,  252,  252,  253,  253,  254,  254,  324,
      324,  325,  325,  395,  395,  396,  396,  397,  397,  421,
     1003,  421,  421,  465,  465,  466,  466,  467,  467,  540,
      540,  541,  541,  602,  602,  603,  603,  604,  604,  658,

      658,  659,  659,  660,  660,  540,  540,  703,  703,  704,
      704,  740,  740,  741,  741,  742,  742,  771,  771,  772,
      772,  773,  773,  659,  659,  801,  801,  802,  802,  829,
      829,  830,  830,  831,  831,  859,  859,  860,  860,  862,
      862,  741,  741,  889,  889,  890,  890,  912,  912,  913,
      913,  914,  914,  925, 1003,  925,  925,  927, 1003,  927,
      927,  928,  928,  929,  929,  936, 1003,  936,  936,  939,
     1003,  939,  939,  801,  801,  943,  943,  944,  944,  958,
      958,  959,  959,  971,  971,  972,  972,  973,  973,  860,
      860,  983,  983,  989,  989,  990,  990,  991,  991,  995,

      995,  998,  998,  999,  999, 1001, 1001, 1002, 1002,    7,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003
    } ;

static yyconst flex_int16_t yy_chk[5886] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1092,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1088,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1086,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1082,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1076,   39,   32, 1068,
       21, 1067,   21,   39,   46,   46, 1062,   65, 1058,   21,
     1057,   25, 1053, 1049, 1011, 1002,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1001,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25,  999,   25,   67,  998,   22,   66,   40,  997,
       29,  996,   22,  995,   22,   22,   29,   22,  994,   69,
       69,   67,   29,   22,   31,   22,   22,  991,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  990,   33,  984,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  983,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  982,   26,   91,
       79,  973,   26,  972,  971,   26,  960,  959,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  958,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  944,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  943,   77,   83,   36,  942,
       78,  930,  929,   82,  928,  914,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  913,  912,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  895,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  891,

      890,  889,  888,  865,  862,  100,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,  100,  860,  859,  839,  833,  832,  831,   86,  830,
      829,  805,  802,  801,  800,  780,  774,   95,   90,  773,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  772,  771,  757,
       92,   95,   72,  744,   85,   92,   87,   84,   62,   85,
       72,  742,  741,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  102,  108,  106,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  103,   97,  101,   98,   99,  103,
       99,   99,  102,   89,   93,   93,   89,   96,  102,   99,
      106,   97,  104,   96,  105,  107,  110,  108,   98,  101,
      103,  112,  101,   98,   99,  103,   99,   99,  102,  104,
      112,  109,  104,  105,  111,   99,  127,  113,  104,  109,
      105,  107,  110,  108,  113,  114,  111,  112,  114,  115,
      128,  115,  740,  711,  705,  104,  112,  109,  104,  105,

      111,  704,  127,  113,  703,  109,  702,  662,  660,  131,
      113,  114,  111,  659,  114,  115,  128,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  134,  118,
      118,  118,  118,  118,  118,  131,  118,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  137,  137,  658,  612,
      605,  604,  603,  602,  134,  118,  118,  118,  118,  118,
      118,  544,  118,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  137,  137,  122,  122,  122,  122,  122,  122,
      125,  181,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  541,  146,  540,  539,  477,  468,  467,  466,  146,

      122,  122,  122,  122,  122,  122,  124,  181,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  146,  124,
      124,  124,  124,  124,  124,  146,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  465,  124,  124,  124,  124,  124,
      124,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  132,  126,  126,  126,  126,  126,  126,  129,  130,
      133,  129,  400,  397,  132,  130,  135,  138,  135,  138,
      133,  139,  136,  140,  141,  139,  396,  132,  126,  126,
      126,  126,  126,  126,  129,  130,  133,  129,  136,  140,

      132,  130,  135,  138,  135,  138,  133,  139,  136,  140,
      142,  139,  143,  395,  145,  144,  145,  147,  141,  147,
      334,  148,  150,  326,  136,  140,  325,  324,  149,  143,
      142,  144,  153,  151,  150,  152,  142,  158,  143,  148,
      145,  144,  145,  147,  141,  147,  149,  148,  150,  151,
      154,  152,  159,  155,  149,  143,  142,  144,  323,  151,
      150,  152,  156,  156,  159,  148,  153,  155,  154,  157,
      157,  158,  149,  160,  161,  151,  154,  152,  159,  155,
      162,  264,  160,  161,  163,  164,  160,  165,  156,  156,
      159,  160,  153,  155,  154,  162,  163,  158,  170,  160,

      161,  164,  167,  167,  157,  254,  162,  165,  160,  161,
      163,  164,  160,  165,  166,  169,  253,  160,  169,  168,
      166,  162,  163,  171,  171,  172,  175,  164,  167,  167,
      157,  168,  170,  165,  173,  174,  173,  172,  176,  252,
      166,  169,  175,  178,  169,  168,  166,  177,  194,  171,
      171,  172,  175,  174,  176,  178,  180,  168,  170,  179,
      173,  174,  173,  172,  176,  177,  180,  196,  175,  178,
      197,  200,  197,  177,  194,  205,  179,  251,  223,  174,
      176,  178,  180,  186,  185,  179,  184,  200,  121,  119,
       55,  177,  180,  196,   51,   50,  197,  200,  197,   47,

      198,  205,  179,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  200,  182,  182,  182,  182,  182,  182,
      188,  182,  188,  188,  188,  188,  188,  188,  188,  188,
      188,   42,   19,   18,  198,   14,   12,    7,    4,    3,
      182,  182,  182,  182,  182,  182,    0,  182,  187,    0,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      198,  187,  187,  187,  187,  187,  187,  192,  209,  192,
      192,  192,  192,  192,  192,  192,  192,  192,    0,  202,
        0,    0,    0,    0,    0,    0,  202,  187,  187,  187,
      187,  187,  187,  190,  209,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  202,  190,  190,  190,  190,
      190,  190,  202,  195,  199,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,    0,    0,    0,    0,  215,
      215,  195,  190,  190,  190,  190,  190,  190,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  195,  199,  191,
      191,  191,  191,  191,  191,  215,  215,  195,    0,    0,
        0,    0,    0,    0,    0,  204,    0,    0,    0,    0,
        0,    0,    0,  195,  199,  191,  191,  191,  191,  191,
      191,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      203,    0,  193,  193,  193,  193,  193,  193,  201,  204,

      201,  206,  207,  206,  207,  208,  210,  212,  222,  210,
      203,  213,    0,  213,    0,    0,  203,  208,  193,  193,
      193,  193,  193,  193,  201,  204,  201,  206,  207,  206,
      207,  208,  210,  211,  214,  210,  203,  213,  216,  213,
      220,  212,  222,  208,  217,  216,    0,  217,  221,  211,
      214,  218,  218,  220,    0,    0,    0,    0,    0,  211,
      214,  221,    0,  225,  216,  225,  220,  212,  222,  224,
      217,  216,  219,  217,  221,  211,  214,  218,  218,  220,
      228,  219,  219,  219,  224,  230,  224,  221,  226,  225,
      219,  225,  227,  229,  226,  224,  228,  233,  219,  229,

        0,  227,    0,    0,  232,    0,  228,  219,  219,  219,
      224,  230,  224,  231,  226,  233,  219,  231,  227,  229,
      226,  232,  228,  233,  234,  229,  236,  227,  234,  231,
      232,  235,  235,  237,    0,  238,  244,  240,  237,  231,
        0,  233,  236,  231,  249,  239,  245,  232,    0,  241,
      234,  238,  236,  240,  234,  231,  241,  235,  235,  237,
      239,  238,  239,  240,  237,  242,  242,  243,  236,  246,
      244,  239,  245,  247,  248,  241,  243,  238,  249,  240,
      248,  268,  241,  265,  265,  267,  239,  267,  239,  246,
      247,  242,  242,  243,    0,  246,  244,    0,    0,  247,

      248,  280,  243,    0,  249,    0,  248,  268,    0,  265,
      265,  267,  307,  267,    0,  246,  247,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  280,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  307,  256,
      256,  256,  256,  256,  256,  258,    0,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  256,  256,  256,  256,  256,
      256,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      270,  309,  257,  257,  257,  257,  257,  257,  259,  270,
      259,  259,  259,  259,  259,  259,  259,  259,  259,    0,

      271,    0,    0,    0,    0,    0,  270,  309,  257,  257,
      257,  257,  257,  257,  260,  270,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  293,  260,  260,  260,
      260,  260,  260,  261,  271,  261,  261,  261,  261,  261,
      261,  261,  261,  261,    0,  293,    0,    0,    0,    0,
        0,    0,  293,  260,  260,  260,  260,  260,  260,  262,
      271,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  293,  262,  262,  262,  262,  262,  262,  263,  272,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  266,
      273,  273,  274,  277,  266,  269,  269,  269,  262,  262,

      262,  262,  262,  262,  274,  269,  275,  276,  276,  277,
      275,  275,  282,  272,  279,  266,  273,  273,  274,  277,
      266,  269,  269,  269,  281,  283,  279,  292,    0,    0,
      274,  269,  275,  276,  276,  277,  275,  275,  278,  272,
      279,  281,  284,  285,  287,  278,  282,  286,  311,  289,
      281,  288,  279,    0,  284,  285,  287,  288,  291,  283,
      290,  292,  286,  294,  278,  289,  290,  281,  284,  285,
      287,  278,  282,  286,  311,  289,  294,  288,  291,  295,
      284,  285,  287,  288,  291,  283,  290,  292,  286,  294,
      296,  289,  290,  297,  295,  298,  296,  300,  303,  299,

      301,  303,  294,    0,  291,  295,  299,  301,  302,  297,
      304,  298,  305,  304,  302,  308,  296,  300,    0,  297,
      295,  298,  296,  300,  303,  299,  301,  303,  306,  306,
        0,  308,  299,  301,  302,  297,  304,  298,  315,  304,
      302,  308,  312,  300,  310,  310,  305,  313,  312,  314,
      316,  318,  315,  316,  306,  306,  318,  308,  314,  319,
      317,  319,  320,  313,  315,  340,  321,  340,  312,  321,
      310,  310,  305,  313,  312,  314,  316,  318,  315,  316,
      317,  322,  318,  353,  314,  319,  317,  319,    0,  313,
        0,  340,  321,  340,  349,  321,  320,  349,  322,    0,

      369,    0,    0,  338,    0,    0,  317,  322,  327,  353,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  370,
      349,    0,  320,  349,  322,  328,  369,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  338,  328,  328,
      328,  328,  328,  328,  329,  370,  329,  329,  329,  329,
      329,  329,  329,  329,  329,    0,  351,    0,    0,    0,
        0,    0,    0,  338,  328,  328,  328,  328,  328,  328,
      330,    0,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  339,  330,  330,  330,  330,  330,  330,  331,
      351,  331,  331,  331,  331,  331,  331,  331,  331,  331,

        0,    0,  339,    0,    0,    0,    0,    0,  339,  330,
      330,  330,  330,  330,  330,  333,  351,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  335,  339,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,    0,
      335,  335,  335,  335,  335,  335,  337,    0,  337,  337,
      337,  337,  337,  337,  337,  337,  337,    0,    0,    0,
        0,    0,    0,    0,    0,  341,  335,  335,  335,  335,
      335,  335,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  341,  342,  336,  336,  336,  336,  336,  336,  343,
      344,  341,  346,  345,  342,  345,  348,    0,  352,    0,

      346,  352,  374,  348,    0,  343,  344,  341,  342,  336,
      336,  336,  336,  336,  336,  343,  344,  354,  346,  345,
      342,  345,  348,  350,  352,  354,  346,  352,  374,  348,
      355,  343,  344,  347,  347,  350,  347,  347,  347,  347,
      347,  347,  347,  354,  347,  356,  360,  355,    0,  350,
      357,  354,  379,  356,  347,  347,  355,  361,  357,  358,
      358,  350,  359,  359,  364,  361,  360,  365,  362,  363,
      363,  356,  360,  355,  367,  365,  357,  362,  379,  356,
      367,  364,    0,  361,  357,  358,  358,  366,  359,  359,
      364,  361,  360,  365,  362,  363,  363,  371,  368,  366,

      367,  365,  383,  362,  368,  371,  367,  364,  372,  373,
      377,  372,  373,  366,  375,  376,  375,  381,  382,  377,
        0,  380,    0,  371,  368,  366,    0,    0,  383,  376,
      368,  371,  387,  378,  372,  373,  377,  372,  373,  380,
      375,  376,  375,    0,  386,  377,  378,  380,  384,  378,
      385,  381,  382,  385,  388,  376,  384,  393,  387,  378,
      386,  389,  390,  389,  392,  380,  388,  413,  390,  394,
      386,  413,  378,  392,  384,  378,  385,  381,  382,  385,
      388,  394,  384,  391,  391,  419,  386,  389,  390,  389,
      392,  393,  388,  413,  390,  394,    0,  413,    0,  392,

        0,    0,  417,    0,    0,    0,    0,  394,    0,  391,
      391,  419,    0,    0,  417,    0,    0,  393,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,  417,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  401,
      417,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  422,  401,  401,  401,  401,  401,  401,  403,  412,
      403,  403,  403,  403,  403,  403,  403,  403,  403,    0,
        0,    0,    0,    0,    0,    0,    0,  422,  401,  401,
      401,  401,  401,  401,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  412,  424,  402,  402,  402,  402,  402,

      402,  404,  424,  404,  404,  404,  404,  404,  404,  404,
      404,  404,    0,  442,    0,    0,    0,    0,    0,  412,
      424,  402,  402,  402,  402,  402,  402,  405,  424,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  406,  442,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      443,  406,  406,  406,  406,  406,  406,  407,  449,  407,
      407,  407,  407,  407,  407,  407,  407,  407,    0,  461,
        0,    0,    0,    0,    0,    0,  443,  406,  406,  406,
      406,  406,  406,  408,  449,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  461,  408,  408,  408,  408,

      408,  408,  409,  414,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  411,  415,  415,  411,    0,  414,  421,
      421,    0,  408,  408,  408,  408,  408,  408,  410,  414,
      416,  410,  418,    0,    0,    0,    0,  410,    0,  411,
      415,  415,  411,  420,  414,  421,  421,  426,  426,  423,
      416,    0,  418,  420,  410,  423,  416,  410,  418,  425,
      429,  420,  420,  410,  427,  425,  429,  425,  431,  420,
      428,  433,  425,  426,  426,  423,  416,  428,  418,  420,
      427,  423,  430,  432,  431,  425,  429,  420,  420,  433,
      427,  425,  429,  425,  431,  434,  428,  433,  425,  432,

      436,  435,  430,  428,  437,  458,  427,  435,  430,  432,
      431,  434,  458,  438,  444,  433,  436,  439,  441,  440,
      437,  434,  440,  441,    0,  432,  436,  435,  430,  438,
      437,  458,  439,  435,  444,  445,  445,  434,  458,  438,
      444,  452,  436,  439,  441,  440,  437,  452,  440,  441,
      446,  446,  447,  450,  447,  438,  448,  448,  439,  451,
      444,  445,  445,  450,  456,  456,  453,  452,  455,  454,
      450,    0,  457,  452,  457,  451,  446,  446,  447,  450,
      447,  454,  448,  448,  453,  451,  460,    0,  455,  450,
      456,  456,  453,  460,  455,  454,  450,  459,  457,  459,

      457,  451,  463,  462,  463,  464,  482,  454,  464,  489,
      453,  489,  460,  482,  455,  462,    0,    0,    0,  460,
        0,    0,    0,  459,    0,  459,  492,    0,  463,  462,
      463,  464,  482,    0,  464,  489,    0,  489,    0,  482,
      469,  462,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  492,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  471,    0,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,    0,  471,  471,  471,  471,  471,
      471,  472,  507,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  471,  471,  471,  471,  471,  471,  473,  507,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  484,
      473,  473,  473,  473,  473,  473,  474,  509,  474,  474,
      474,  474,  474,  474,  474,  474,  474,    0,    0,  484,
        0,    0,    0,    0,    0,  484,  473,  473,  473,  473,
      473,  473,  476,  509,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  478,  484,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,    0,  478,  478,  478,
      478,  478,  478,  480,    0,  480,  480,  480,  480,  480,
      480,  480,  480,  480,    0,  486,    0,    0,    0,    0,

        0,    0,  481,  478,  478,  478,  478,  478,  478,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  481,  483,
      479,  479,  479,  479,  479,  479,  483,  485,  481,  486,
      488,  491,  490,  493,  491,    0,  485,  490,  487,    0,
        0,  494,  493,  488,  481,  483,  479,  479,  479,  479,
      479,  479,  483,  485,  487,  486,  488,  491,  490,  493,
      491,  494,  485,  490,  487,  495,  497,  494,  493,  488,
      496,  496,  499,  501,    0,  498,  500,  502,  499,  506,
      487,  495,  497,  498,  502,  500,  503,  494,  503,  501,
      505,  495,  497,  505,    0,    0,  496,  496,  499,  501,

      504,  498,  500,  502,  499,  508,  512,  495,  497,  498,
      502,  500,  503,  506,  503,  501,  505,  504,  511,  505,
      510,  508,  513,  510,  514,  516,  504,  511,  515,  517,
      515,  508,  512,  518,  522,  524,    0,    0,    0,  506,
      519,  520,  521,  504,  511,  525,  510,  508,  513,  510,
      514,  516,  519,  511,  515,  517,  515,  520,  521,  518,
      522,  523,  526,  525,  527,  530,  519,  520,  521,  524,
      531,  525,  527,  528,  523,  529,    0,  530,  519,  526,
      533,  534,  528,  520,  521,    0,  531,  523,  526,  525,
      527,  530,  529,  535,  533,  524,  531,  538,  527,  528,

      523,  529,  532,  530,  532,  526,  533,  534,  528,  535,
      536,  537,  531,  554,  555,  560,  537,  564,  529,  535,
      533,  560,  554,  538,  555,  536,    0,    0,  532,    0,
      532,    0,    0,    0,    0,  535,  536,  537,    0,  554,
      555,  560,  537,  564,    0,    0,    0,  560,  554,    0,
      555,  536,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  543,    0,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  545,    0,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,    0,  545,  545,  545,  545,
      545,  545,  547,    0,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  545,  545,  545,  545,  545,  545,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  553,  556,  546,
      546,  546,  546,  546,  546,  550,  556,  550,  550,  550,
      550,  550,  550,  550,  550,  550,    0,  553,    0,    0,
        0,    0,    0,  553,  556,  546,  546,  546,  546,  546,
      546,  549,  556,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  553,  549,  549,  549,  549,  549,  549,
      552,  581,  552,  552,  552,  552,  552,  552,  552,  552,
      552,    0,    0,    0,    0,    0,    0,  563,    0,    0,

      549,  549,  549,  549,  549,  549,  551,  581,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  557,  551,
      551,  551,  551,  551,  551,  558,  559,  559,    0,    0,
      557,  563,    0,  566,  558,    0,  566,    0,  561,  562,
        0,  565,    0,  575,  557,  551,  551,  551,  551,  551,
      551,  558,  559,  559,  561,  562,  557,  563,  570,  566,
      558,  565,  566,  567,  561,  562,  568,  565,  569,  571,
      567,  572,  568,  577,  569,    0,  571,  575,  570,  573,
      561,  562,  573,  576,  570,  574,  574,  565,  579,  567,
      582,  572,  568,  578,  569,  571,  567,  572,  568,  576,

      569,  578,  571,  575,  570,  573,  583,  577,  573,  576,
      584,  574,  574,  580,  585,  580,  582,  572,  588,  578,
      586,  585,  579,  586,  591,  576,  587,  578,  589,  587,
      592,  593,  583,  577,  590,  594,  584,  589,  592,  580,
      585,  580,  596,  593,  588,  596,  586,  585,  579,  586,
      590,  597,  587,  598,  589,  587,  592,  593,  591,  595,
      590,  594,  599,  589,  592,  600,  595,  601,  596,  593,
        0,  596,    0,    0,    0,    0,  590,  597,  616,  598,
      616,  600,  625,  601,  591,  595,    0,    0,  599,    0,
        0,  600,  595,  601,  606,  606,  606,  606,  606,  606,

      606,  606,  606,    0,  616,    0,  616,  600,  625,  601,
      607,    0,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  627,  607,  607,  607,  607,  607,  607,  608,
      632,  608,  608,  608,  608,  608,  608,  608,  608,  608,
        0,  636,    0,    0,    0,    0,    0,    0,  627,  607,
      607,  607,  607,  607,  607,  609,  632,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  636,  609,  609,
      609,  609,  609,  609,  610,  622,  610,  610,  610,  610,
      610,  610,  610,  610,  610,    0,    0,  622,    0,    0,
        0,    0,    0,    0,  609,  609,  609,  609,  609,  609,

      611,  622,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  613,  622,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,    0,  613,  613,  613,  613,  613,
      613,  615,    0,  615,  615,  615,  615,  615,  615,  615,
      615,  615,    0,    0,    0,    0,  629,    0,    0,    0,
      621,  613,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  621,  623,  614,  614,
      614,  614,  614,  614,  617,  618,  621,  619,  617,  619,
      629,  620,  618,  620,  623,  624,    0,    0,  628,  624,
      628,    0,  621,  623,  614,  614,  614,  614,  614,  614,

      617,  618,  630,  619,  617,  619,  629,  620,  618,  620,
      623,  624,  626,  631,  628,  624,  628,  633,  634,  630,
      635,  626,  637,    0,  639,  642,  643,  640,  630,  638,
      644,  631,  635,    0,  634,  633,  640,  642,  626,  631,
      645,  646,  637,  633,  634,  630,  635,  626,  637,  638,
      639,  642,  643,  640,  647,  638,  644,  631,  635,  641,
      634,  633,  640,  642,  648,  641,  645,  646,  637,  649,
      650,  652,  653,  651,  654,  638,  655,  656,  656,    0,
      647,  649,  651,  652,  671,  641,  673,  657,  653,    0,
      648,  641,    0,    0,    0,  649,  650,  652,  653,  651,

      654,  677,  655,  656,  656,  657,    0,  649,  651,  652,
      671,    0,  673,  657,  653,  661,    0,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  677,    0,    0,
        0,  657,  663,    0,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  678,  663,  663,  663,  663,  663,
      663,  665,    0,  665,  665,  665,  665,  665,  665,  665,
      665,  665,    0,    0,    0,    0,    0,    0,    0,  680,
      678,  663,  663,  663,  663,  663,  663,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  674,  674,  664,  664,
      664,  664,  664,  664,  667,  680,  667,  667,  667,  667,

      667,  667,  667,  667,  667,    0,    0,    0,    0,    0,
        0,    0,  674,  674,  664,  664,  664,  664,  664,  664,
      666,    0,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  676,  666,  666,  666,  666,  666,  666,  669,
      676,  669,  669,  669,  669,  669,  669,  669,  669,  669,
        0,    0,    0,    0,    0,    0,    0,  686,  676,  666,
      666,  666,  666,  666,  666,  668,  676,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  670,  668,  668,
      668,  668,  668,  668,  672,  675,  679,  681,  682,  681,
      672,  686,  675,  670,  683,  684,  687,  682,  685,  685,

      683,  684,  679,  670,  668,  668,  668,  668,  668,  668,
      672,  675,  679,  681,  682,  681,  672,  686,  675,  670,
      683,  684,  687,  682,  685,  685,  683,  684,  679,  688,
      689,  690,  696,  691,  692,  693,  688,  699,  697,  689,
      698,  698,  700,  701,  699,  717,  718,  696,  690,  691,
      697,  692,  693,  722,  700,  688,  689,  690,  696,  691,
      692,  693,  688,  699,  697,  689,  698,  698,  700,  701,
      699,  717,  718,  696,  690,  691,  697,  692,  693,  722,
      700,  706,    0,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  723,  706,  706,  706,  706,  706,  706,

      707,  727,  707,  707,  707,  707,  707,  707,  707,  707,
      707,    0,    0,    0,    0,    0,    0,    0,    0,  723,
      706,  706,  706,  706,  706,  706,  708,  727,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  721,  708,
      708,  708,  708,  708,  708,  709,  729,  709,  709,  709,
      709,  709,  709,  709,  709,  709,    0,    0,  721,    0,
        0,    0,    0,    0,  721,  708,  708,  708,  708,  708,
      708,  710,  729,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  712,  721,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,    0,  712,  712,  712,  712,

      712,  712,  714,    0,  714,  714,  714,  714,  714,  714,
      714,  714,  714,    0,    0,    0,    0,    0,    0,    0,
        0,  719,  712,  712,  712,  712,  712,  712,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  719,  720,  713,
      713,  713,  713,  713,  713,  715,  716,  719,  716,  715,
      725,  726,  730,  725,  720,    0,    0,  724,  734,    0,
      726,    0,  732,  719,  720,  713,  713,  713,  713,  713,
      713,  715,  716,  724,  716,  715,  725,  726,  730,  725,
      720,  728,  732,  724,  731,  736,  726,  728,  732,  728,
      733,  737,  734,  735,  738,  738,  739,  752,  753,  724,

      736,  731,  754,  760,  739,  753,  733,  728,  732,  735,
      731,  736,    0,  728,    0,  728,  733,  737,  734,  735,
      738,  738,  739,  752,  753,    0,  736,  731,  754,  760,
      739,  753,  733,    0,  743,  735,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  745,    0,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  765,  745,
      745,  745,  745,  745,  745,  747,    0,  747,  747,  747,
      747,  747,  747,  747,  747,  747,    0,    0,    0,    0,
        0,    0,    0,  791,  765,  745,  745,  745,  745,  745,
      745,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      758,  798,  746,  746,  746,  746,  746,  746,  749,  791,
      749,  749,  749,  749,  749,  749,  749,  749,  749,    0,
      758,    0,    0,    0,    0,    0,  758,  798,  746,  746,
      746,  746,  746,  746,  748,  791,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  758,  748,  748,  748,
      748,  748,  748,  751,  799,  751,  751,  751,  751,  751,
      751,  751,  751,  751,    0,  759,    0,    0,    0,    0,
        0,    0,    0,  748,  748,  748,  748,  748,  748,  750,
      799,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  761,  750,  750,  750,  750,  750,  750,  755,  759,

      756,  755,  756,  762,  763,    0,  766,  763,  761,  764,
      785,  764,  766,  767,  767,  768,  762,  761,  750,  750,
      750,  750,  750,  750,  755,  759,  756,  755,  756,  762,
      763,  768,  766,  763,  761,  764,  770,  764,  766,  767,
      767,  768,  762,  769,  785,  769,  786,  816,  795,  784,
      786,  795,  770,    0,  817,    0,    0,  768,    0,    0,
        0,    0,  770,    0,    0,  784,    0,    0,    0,  769,
      785,  769,  786,  816,  795,  784,  786,  795,  770,  775,
      817,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  784,  775,  775,  775,  775,  775,  775,  776,  818,

      776,  776,  776,  776,  776,  776,  776,  776,  776,    0,
      815,    0,    0,    0,    0,    0,    0,    0,  775,  775,
      775,  775,  775,  775,  777,  818,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  792,  777,  777,  777,
      777,  777,  777,  778,  815,  778,  778,  778,  778,  778,
      778,  778,  778,  778,    0,    0,  792,    0,    0,    0,
        0,    0,  792,  777,  777,  777,  777,  777,  777,  779,
      815,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  781,  792,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,    0,  781,  781,  781,  781,  781,  781,

      783,    0,  783,  783,  783,  783,  783,  783,  783,  783,
      783,    0,    0,    0,    0,    0,    0,  822,    0,  787,
      781,  781,  781,  781,  781,  781,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  787,  788,  782,  782,  782,
      782,  782,  782,  822,  789,  787,  789,    0,    0,    0,
      797,  797,  788,  790,  825,  821,  813,  793,  794,  813,
      821,  787,  788,  782,  782,  782,  782,  782,  782,  790,
      789,  790,  789,  793,  794,  796,  797,  797,  788,  790,
      825,  821,  813,  793,  794,  813,  821,  796,    0,    0,
        0,    0,    0,    0,    0,  790,    0,  790,    0,  793,

      794,  796,    0,    0,    0,    0,  823,  823,  823,    0,
      823,    0,  804,  796,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  806,    0,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  823,  806,  806,  806,
      806,  806,  806,  808,    0,  808,  808,  808,  808,  808,
      808,  808,  808,  808,    0,    0,    0,    0,    0,    0,
        0,    0,  823,  806,  806,  806,  806,  806,  806,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  820,  846,
      807,  807,  807,  807,  807,  807,  810,  820,  810,  810,
      810,  810,  810,  810,  810,  810,  810,    0,  847,    0,

        0,    0,    0,    0,  820,  846,  807,  807,  807,  807,
      807,  807,  809,  820,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  847,  809,  809,  809,  809,  809,
      809,  812,    0,  812,  812,  812,  812,  812,  812,  812,
      812,  812,    0,  814,    0,    0,    0,    0,    0,    0,
        0,  809,  809,  809,  809,  809,  809,  811,  814,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  814,
      811,  811,  811,  811,  811,  811,  819,  824,  826,  824,
      827,  828,  843,  844,  814,  848,  843,  844,  827,  851,
      871,  876,  819,  828,  877,  826,  811,  811,  811,  811,

      811,  811,  819,  824,  826,  824,  827,  828,  843,  844,
        0,  848,  843,  844,  827,  851,  871,  876,  819,  828,
      877,  826,  834,    0,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  858,  834,  834,  834,  834,  834,
      834,  835,  858,  835,  835,  835,  835,  835,  835,  835,
      835,  835,    0,    0,    0,  853,    0,  854,    0,    0,
      858,  834,  834,  834,  834,  834,  834,  836,  858,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  853,  849,
      836,  836,  836,  836,  836,  836,  837,  854,  837,  837,
      837,  837,  837,  837,  837,  837,  837,    0,    0,  849,

        0,    0,    0,    0,  853,  849,  836,  836,  836,  836,
      836,  836,  838,  854,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  840,  849,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,    0,  840,  840,  840,
      840,  840,  840,  842,  850,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  855,  852,  855,  845,  852,  856,
      850,  874,  857,  840,  840,  840,  840,  840,  840,  845,
      850,  878,  884,  878,  886,  856,  845,  845,  857,  872,
      855,  874,  855,  845,  852,  856,  850,  874,  857,    0,
        0,    0,    0,    0,    0,  845,  872,  878,  884,  878,

      886,  856,  845,  845,  857,  872,  880,  874,    0,  864,
      852,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  866,  872,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  902,  880,  866,  866,  866,  866,  866,  866,
      867,  906,  867,  867,  867,  867,  867,  867,  867,  867,
      867,    0,    0,    0,    0,    0,    0,    0,  902,  880,
      866,  866,  866,  866,  866,  866,  868,  906,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  873,  868,
      868,  868,  868,  868,  868,  869,  881,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  873,  875,  879,  882,

        0,  883,  887,  875,  873,  868,  868,  868,  868,  868,
      868,  881,  897,  901,  885,  875,  879,  885,  887,  897,
      907,  901,  873,  875,  879,    0,  882,  900,  887,  875,
      883,    0,  900,    0,    0,    0,    0,  881,  897,  901,
      885,  875,  879,  885,  887,  897,  907,  901,    0,    0,
        0,  898,  882,  900,    0,    0,  883,  892,  900,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  908,  898,
      892,  892,  892,  892,  892,  892,  893,  898,  893,  893,
      893,  893,  893,  893,  893,  893,  893,    0,  899,  909,
      904,  899,  904,    0,  908,  898,  892,  892,  892,  892,

      892,  892,  894,  910,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  899,  909,  904,  899,  904,  905,
      905,  911,  905,  905,  905,  905,  905,  905,  921,  910,
      905,  919,  922,    0,  925,  925,    0,    0,    0,    0,
      905,  905,  920,  923,  937,  933,  916,  911,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  919,  920,  923,
      925,  925,  921,  933,  927,  927,  922,    0,  920,  923,
      937,  933,  926,  926,    0,  926,  926,  926,  926,  926,
      926,  927,  932,  926,  920,  923,  938,  932,  921,  933,
      927,  927,  922,  926,  926,  934,  935,  936,  936,  940,

      934,    0,  935,  939,  939,  946,  946,  927,  932,  941,
      949,  947,  938,  932,  950,  951,  941,  947,  952,  940,
      939,  934,  935,  936,  936,  940,  934,  948,  935,  939,
      939,  946,  946,  948,  954,  941,  949,  947,  956,  956,
      950,  951,  941,  947,  952,  940,  939,  957,  955,  961,
      962,  964,  964,  948,  954,  955,  965,  962,  963,  948,
      954,  963,  967,  969,  956,  956,  968,  968,  976,  976,
      970,  977,  975,  957,  955,  961,  962,  964,  964,  975,
      954,  955,  965,  962,  963,  978,  980,  963,  967,  969,
      970,  981,  968,  968,  976,  976,  970,  977,  975,  985,

      986,  985,  988,  993,    0,  975,  980,    0,    0,    0,
        0,  978,  980,    0,    0,    0,  970,  981,    0,    0,
        0,    0,    0,    0,    0,  985,  986,  985,  988,  993,
        0,    0,  980, 1004, 1004, 1004, 1004, 1005, 1005, 1005,
     1005, 1006, 1006, 1006, 1006, 1007,    0, 1007, 1007, 1008,
     1008, 1008, 1008, 1009,    0, 1009, 1009, 1010, 1010, 1012,
     1012, 1013, 1013, 1014, 1014, 1015, 1015, 1016, 1016, 1017,
     1017, 1018, 1018, 1019, 1019, 1020, 1020, 1021, 1021, 1022,
        0, 1022, 1022, 1023, 1023, 1024, 1024, 1025, 1025, 1026,
     1026, 1027, 1027, 1028, 1028, 1029, 1029, 1030, 1030, 1031,

     1031, 1032, 1032, 1033, 1033, 1034, 1034, 1035, 1035, 1036,
     1036, 1037, 1037, 1038, 1038, 1039, 1039, 1040, 1040, 1041,
     1041, 1042, 1042, 1043, 1043, 1044, 1044, 1045, 1045, 1046,
     1046, 1047, 1047, 1048, 1048, 1050, 1050, 1051, 1051, 1052,
     1052, 1054, 1054, 1055, 1055, 1056, 1056, 1059, 1059, 1060,
     1060, 1061, 1061, 1063,    0, 1063, 1063, 1064,    0, 1064,
     1064, 1065, 1065, 1066, 1066, 1069,    0, 1069, 1069, 1070,
        0, 1070, 1070, 1071, 1071, 1072, 1072, 1073, 1073, 1074,
     1074, 1075, 1075, 1077, 1077, 1078, 1078, 1079, 1079, 1080,
     1080, 1081, 1081, 1083, 1083, 1084, 1084, 1085, 1085, 1087,

     1087, 1089, 1089, 1090, 1090, 1091, 1091, 1093, 1093, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[122] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2112 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2222 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1004 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5810 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::PREFIX_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 168 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 169 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 107:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 203 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 212 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 221 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 230 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 242 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 249 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 270 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 302 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 330 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 340 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 349 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 352 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3081 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1004 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1004 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1003);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "SrvLexer.l"



